Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programa_minipar
Rule 1     programa_minipar -> bloco_stmt
Rule 2     bloco_stmt -> bloco_SEQ
Rule 3     bloco_stmt -> bloco_PAR
Rule 4     bloco_SEQ -> SEQ LBRACE stmts RBRACE
Rule 5     bloco_PAR -> PAR LBRACE stmts RBRACE
Rule 6     stmts -> stmt
Rule 7     stmts -> stmt stmts
Rule 8     tipo_var -> BOOL
Rule 9     tipo_var -> INT
Rule 10    tipo_var -> FLOAT_TYPE
Rule 11    tipo_var -> STRING_TYPE
Rule 12    tipo_var -> C_CHANNEL
Rule 13    tipo_var -> LIST LT tipo_var GT
Rule 14    declaracao -> tipo_var ID ASSIGN expr
Rule 15    declaracao -> C_CHANNEL ASSIGN ID STRING NUM SEMICOLON
Rule 16    atribuicao -> ID ASSIGN expr
Rule 17    stmt -> declaracao SEMICOLON
Rule 18    stmt -> atribuicao SEMICOLON
Rule 19    stmt -> if_stmt
Rule 20    stmt -> for_stmt
Rule 21    stmt -> while_stmt
Rule 22    stmt -> def_funcao
Rule 23    stmt -> input SEMICOLON
Rule 24    stmt -> output SEMICOLON
Rule 25    stmt -> chamada_funcao SEMICOLON
Rule 26    stmt -> receive_stmt
Rule 27    stmt -> send_stmt
Rule 28    stmt -> RETURN expr SEMICOLON
Rule 29    stmt -> COMMENT
Rule 30    for_stmt -> FOR LPAREN ID IN expr RPAREN LBRACE stmts RBRACE
Rule 31    while_stmt -> WHILE LPAREN expr RPAREN LBRACE stmts RBRACE
Rule 32    input -> INPUT LPAREN args RPAREN
Rule 33    output -> OUTPUT LPAREN args RPAREN
Rule 34    receive_stmt -> ID DOT RECEIVE COLON expr SEMICOLON
Rule 35    send_stmt -> ID DOT SEND COLON expr SEMICOLON
Rule 36    params -> ID COMMA params
Rule 37    params -> ID
Rule 38    params -> <empty>
Rule 39    def_funcao -> DEF ID LPAREN params RPAREN LBRACE stmts RBRACE
Rule 40    expr -> INPUT LPAREN args RPAREN
Rule 41    expr -> OUTPUT LPAREN args RPAREN
Rule 42    chamada_funcao -> ID LPAREN args RPAREN
Rule 43    args -> expr_list
Rule 44    args -> <empty>
Rule 45    expr -> chamada_funcao
Rule 46    expr -> expr_binop
Rule 47    expr -> expr_comparacao
Rule 48    expr -> expr_lista
Rule 49    expr -> expr_simples
Rule 50    expr_binop -> expr PLUS expr
Rule 51    expr_binop -> expr MINUS expr
Rule 52    expr_binop -> expr MULT expr
Rule 53    expr_binop -> expr DIV expr
Rule 54    expr_comparacao -> expr LT expr
Rule 55    expr_comparacao -> expr LE expr
Rule 56    expr_comparacao -> expr GT expr
Rule 57    expr_comparacao -> expr GE expr
Rule 58    expr_comparacao -> expr EQ expr
Rule 59    expr_comparacao -> expr NE expr
Rule 60    expr_lista -> LBRACKET expr_list RBRACKET
Rule 61    expr_list -> expr
Rule 62    expr_list -> expr COMMA expr_list
Rule 63    expr_simples -> ID
Rule 64    expr_simples -> NUM
Rule 65    expr_simples -> FLOAT
Rule 66    expr_simples -> STRING
Rule 67    expr_simples -> TRUE
Rule 68    expr_simples -> FALSE
Rule 69    expr_simples -> ID DOT ID
Rule 70    if_stmt -> IF LPAREN expr RPAREN LBRACE stmts RBRACE
Rule 71    if_stmt -> IF LPAREN expr RPAREN LBRACE stmts RBRACE ELSE LBRACE stmts RBRACE

Terminals, with rules where they appear

ASSIGN               : 14 15 16
BOOL                 : 8
COLON                : 34 35
COMMA                : 36 62
COMMENT              : 29
C_CHANNEL            : 12 15
DEF                  : 39
DIV                  : 53
DOT                  : 34 35 69
ELSE                 : 71
EQ                   : 58
FALSE                : 68
FLOAT                : 65
FLOAT_TYPE           : 10
FOR                  : 30
GE                   : 57
GT                   : 13 56
ID                   : 14 15 16 30 34 35 36 37 39 42 63 69 69
IF                   : 70 71
IN                   : 30
INPUT                : 32 40
INT                  : 9
LBRACE               : 4 5 30 31 39 70 71 71
LBRACKET             : 60
LE                   : 55
LIST                 : 13
LPAREN               : 30 31 32 33 39 40 41 42 70 71
LT                   : 13 54
MINUS                : 51
MULT                 : 52
NE                   : 59
NUM                  : 15 64
OUTPUT               : 33 41
PAR                  : 5
PLUS                 : 50
RBRACE               : 4 5 30 31 39 70 71 71
RBRACKET             : 60
RECEIVE              : 34
RETURN               : 28
RPAREN               : 30 31 32 33 39 40 41 42 70 71
SEMICOLON            : 15 17 18 23 24 25 28 34 35
SEND                 : 35
SEQ                  : 4
STRING               : 15 66
STRING_TYPE          : 11
TRUE                 : 67
WHILE                : 31
error                : 

Nonterminals, with rules where they appear

args                 : 32 33 40 41 42
atribuicao           : 18
bloco_PAR            : 3
bloco_SEQ            : 2
bloco_stmt           : 1
chamada_funcao       : 25 45
declaracao           : 17
def_funcao           : 22
expr                 : 14 16 28 30 31 34 35 50 50 51 51 52 52 53 53 54 54 55 55 56 56 57 57 58 58 59 59 61 62 70 71
expr_binop           : 46
expr_comparacao      : 47
expr_list            : 43 60 62
expr_lista           : 48
expr_simples         : 49
for_stmt             : 20
if_stmt              : 19
input                : 23
output               : 24
params               : 36 39
programa_minipar     : 0
receive_stmt         : 26
send_stmt            : 27
stmt                 : 6 7
stmts                : 4 5 7 30 31 39 70 71 71
tipo_var             : 13 14
while_stmt           : 21

Parsing method: LALR

state 0

    (0) S' -> . programa_minipar
    (1) programa_minipar -> . bloco_stmt
    (2) bloco_stmt -> . bloco_SEQ
    (3) bloco_stmt -> . bloco_PAR
    (4) bloco_SEQ -> . SEQ LBRACE stmts RBRACE
    (5) bloco_PAR -> . PAR LBRACE stmts RBRACE

    SEQ             shift and go to state 5
    PAR             shift and go to state 6

    programa_minipar               shift and go to state 1
    bloco_stmt                     shift and go to state 2
    bloco_SEQ                      shift and go to state 3
    bloco_PAR                      shift and go to state 4

state 1

    (0) S' -> programa_minipar .



state 2

    (1) programa_minipar -> bloco_stmt .

    $end            reduce using rule 1 (programa_minipar -> bloco_stmt .)


state 3

    (2) bloco_stmt -> bloco_SEQ .

    $end            reduce using rule 2 (bloco_stmt -> bloco_SEQ .)


state 4

    (3) bloco_stmt -> bloco_PAR .

    $end            reduce using rule 3 (bloco_stmt -> bloco_PAR .)


state 5

    (4) bloco_SEQ -> SEQ . LBRACE stmts RBRACE

    LBRACE          shift and go to state 7


state 6

    (5) bloco_PAR -> PAR . LBRACE stmts RBRACE

    LBRACE          shift and go to state 8


state 7

    (4) bloco_SEQ -> SEQ LBRACE . stmts RBRACE
    (6) stmts -> . stmt
    (7) stmts -> . stmt stmts
    (17) stmt -> . declaracao SEMICOLON
    (18) stmt -> . atribuicao SEMICOLON
    (19) stmt -> . if_stmt
    (20) stmt -> . for_stmt
    (21) stmt -> . while_stmt
    (22) stmt -> . def_funcao
    (23) stmt -> . input SEMICOLON
    (24) stmt -> . output SEMICOLON
    (25) stmt -> . chamada_funcao SEMICOLON
    (26) stmt -> . receive_stmt
    (27) stmt -> . send_stmt
    (28) stmt -> . RETURN expr SEMICOLON
    (29) stmt -> . COMMENT
    (14) declaracao -> . tipo_var ID ASSIGN expr
    (15) declaracao -> . C_CHANNEL ASSIGN ID STRING NUM SEMICOLON
    (16) atribuicao -> . ID ASSIGN expr
    (70) if_stmt -> . IF LPAREN expr RPAREN LBRACE stmts RBRACE
    (71) if_stmt -> . IF LPAREN expr RPAREN LBRACE stmts RBRACE ELSE LBRACE stmts RBRACE
    (30) for_stmt -> . FOR LPAREN ID IN expr RPAREN LBRACE stmts RBRACE
    (31) while_stmt -> . WHILE LPAREN expr RPAREN LBRACE stmts RBRACE
    (39) def_funcao -> . DEF ID LPAREN params RPAREN LBRACE stmts RBRACE
    (32) input -> . INPUT LPAREN args RPAREN
    (33) output -> . OUTPUT LPAREN args RPAREN
    (42) chamada_funcao -> . ID LPAREN args RPAREN
    (34) receive_stmt -> . ID DOT RECEIVE COLON expr SEMICOLON
    (35) send_stmt -> . ID DOT SEND COLON expr SEMICOLON
    (8) tipo_var -> . BOOL
    (9) tipo_var -> . INT
    (10) tipo_var -> . FLOAT_TYPE
    (11) tipo_var -> . STRING_TYPE
    (12) tipo_var -> . C_CHANNEL
    (13) tipo_var -> . LIST LT tipo_var GT

    RETURN          shift and go to state 22
    COMMENT         shift and go to state 23
    C_CHANNEL       shift and go to state 26
    ID              shift and go to state 25
    IF              shift and go to state 27
    FOR             shift and go to state 28
    WHILE           shift and go to state 29
    DEF             shift and go to state 30
    INPUT           shift and go to state 31
    OUTPUT          shift and go to state 32
    BOOL            shift and go to state 33
    INT             shift and go to state 34
    FLOAT_TYPE      shift and go to state 35
    STRING_TYPE     shift and go to state 36
    LIST            shift and go to state 37

    stmts                          shift and go to state 9
    stmt                           shift and go to state 10
    declaracao                     shift and go to state 11
    atribuicao                     shift and go to state 12
    if_stmt                        shift and go to state 13
    for_stmt                       shift and go to state 14
    while_stmt                     shift and go to state 15
    def_funcao                     shift and go to state 16
    input                          shift and go to state 17
    output                         shift and go to state 18
    chamada_funcao                 shift and go to state 19
    receive_stmt                   shift and go to state 20
    send_stmt                      shift and go to state 21
    tipo_var                       shift and go to state 24

state 8

    (5) bloco_PAR -> PAR LBRACE . stmts RBRACE
    (6) stmts -> . stmt
    (7) stmts -> . stmt stmts
    (17) stmt -> . declaracao SEMICOLON
    (18) stmt -> . atribuicao SEMICOLON
    (19) stmt -> . if_stmt
    (20) stmt -> . for_stmt
    (21) stmt -> . while_stmt
    (22) stmt -> . def_funcao
    (23) stmt -> . input SEMICOLON
    (24) stmt -> . output SEMICOLON
    (25) stmt -> . chamada_funcao SEMICOLON
    (26) stmt -> . receive_stmt
    (27) stmt -> . send_stmt
    (28) stmt -> . RETURN expr SEMICOLON
    (29) stmt -> . COMMENT
    (14) declaracao -> . tipo_var ID ASSIGN expr
    (15) declaracao -> . C_CHANNEL ASSIGN ID STRING NUM SEMICOLON
    (16) atribuicao -> . ID ASSIGN expr
    (70) if_stmt -> . IF LPAREN expr RPAREN LBRACE stmts RBRACE
    (71) if_stmt -> . IF LPAREN expr RPAREN LBRACE stmts RBRACE ELSE LBRACE stmts RBRACE
    (30) for_stmt -> . FOR LPAREN ID IN expr RPAREN LBRACE stmts RBRACE
    (31) while_stmt -> . WHILE LPAREN expr RPAREN LBRACE stmts RBRACE
    (39) def_funcao -> . DEF ID LPAREN params RPAREN LBRACE stmts RBRACE
    (32) input -> . INPUT LPAREN args RPAREN
    (33) output -> . OUTPUT LPAREN args RPAREN
    (42) chamada_funcao -> . ID LPAREN args RPAREN
    (34) receive_stmt -> . ID DOT RECEIVE COLON expr SEMICOLON
    (35) send_stmt -> . ID DOT SEND COLON expr SEMICOLON
    (8) tipo_var -> . BOOL
    (9) tipo_var -> . INT
    (10) tipo_var -> . FLOAT_TYPE
    (11) tipo_var -> . STRING_TYPE
    (12) tipo_var -> . C_CHANNEL
    (13) tipo_var -> . LIST LT tipo_var GT

    RETURN          shift and go to state 22
    COMMENT         shift and go to state 23
    C_CHANNEL       shift and go to state 26
    ID              shift and go to state 25
    IF              shift and go to state 27
    FOR             shift and go to state 28
    WHILE           shift and go to state 29
    DEF             shift and go to state 30
    INPUT           shift and go to state 31
    OUTPUT          shift and go to state 32
    BOOL            shift and go to state 33
    INT             shift and go to state 34
    FLOAT_TYPE      shift and go to state 35
    STRING_TYPE     shift and go to state 36
    LIST            shift and go to state 37

    stmts                          shift and go to state 38
    stmt                           shift and go to state 10
    declaracao                     shift and go to state 11
    atribuicao                     shift and go to state 12
    if_stmt                        shift and go to state 13
    for_stmt                       shift and go to state 14
    while_stmt                     shift and go to state 15
    def_funcao                     shift and go to state 16
    input                          shift and go to state 17
    output                         shift and go to state 18
    chamada_funcao                 shift and go to state 19
    receive_stmt                   shift and go to state 20
    send_stmt                      shift and go to state 21
    tipo_var                       shift and go to state 24

state 9

    (4) bloco_SEQ -> SEQ LBRACE stmts . RBRACE

    RBRACE          shift and go to state 39


state 10

    (6) stmts -> stmt .
    (7) stmts -> stmt . stmts
    (6) stmts -> . stmt
    (7) stmts -> . stmt stmts
    (17) stmt -> . declaracao SEMICOLON
    (18) stmt -> . atribuicao SEMICOLON
    (19) stmt -> . if_stmt
    (20) stmt -> . for_stmt
    (21) stmt -> . while_stmt
    (22) stmt -> . def_funcao
    (23) stmt -> . input SEMICOLON
    (24) stmt -> . output SEMICOLON
    (25) stmt -> . chamada_funcao SEMICOLON
    (26) stmt -> . receive_stmt
    (27) stmt -> . send_stmt
    (28) stmt -> . RETURN expr SEMICOLON
    (29) stmt -> . COMMENT
    (14) declaracao -> . tipo_var ID ASSIGN expr
    (15) declaracao -> . C_CHANNEL ASSIGN ID STRING NUM SEMICOLON
    (16) atribuicao -> . ID ASSIGN expr
    (70) if_stmt -> . IF LPAREN expr RPAREN LBRACE stmts RBRACE
    (71) if_stmt -> . IF LPAREN expr RPAREN LBRACE stmts RBRACE ELSE LBRACE stmts RBRACE
    (30) for_stmt -> . FOR LPAREN ID IN expr RPAREN LBRACE stmts RBRACE
    (31) while_stmt -> . WHILE LPAREN expr RPAREN LBRACE stmts RBRACE
    (39) def_funcao -> . DEF ID LPAREN params RPAREN LBRACE stmts RBRACE
    (32) input -> . INPUT LPAREN args RPAREN
    (33) output -> . OUTPUT LPAREN args RPAREN
    (42) chamada_funcao -> . ID LPAREN args RPAREN
    (34) receive_stmt -> . ID DOT RECEIVE COLON expr SEMICOLON
    (35) send_stmt -> . ID DOT SEND COLON expr SEMICOLON
    (8) tipo_var -> . BOOL
    (9) tipo_var -> . INT
    (10) tipo_var -> . FLOAT_TYPE
    (11) tipo_var -> . STRING_TYPE
    (12) tipo_var -> . C_CHANNEL
    (13) tipo_var -> . LIST LT tipo_var GT

    RBRACE          reduce using rule 6 (stmts -> stmt .)
    RETURN          shift and go to state 22
    COMMENT         shift and go to state 23
    C_CHANNEL       shift and go to state 26
    ID              shift and go to state 25
    IF              shift and go to state 27
    FOR             shift and go to state 28
    WHILE           shift and go to state 29
    DEF             shift and go to state 30
    INPUT           shift and go to state 31
    OUTPUT          shift and go to state 32
    BOOL            shift and go to state 33
    INT             shift and go to state 34
    FLOAT_TYPE      shift and go to state 35
    STRING_TYPE     shift and go to state 36
    LIST            shift and go to state 37

    stmt                           shift and go to state 10
    stmts                          shift and go to state 40
    declaracao                     shift and go to state 11
    atribuicao                     shift and go to state 12
    if_stmt                        shift and go to state 13
    for_stmt                       shift and go to state 14
    while_stmt                     shift and go to state 15
    def_funcao                     shift and go to state 16
    input                          shift and go to state 17
    output                         shift and go to state 18
    chamada_funcao                 shift and go to state 19
    receive_stmt                   shift and go to state 20
    send_stmt                      shift and go to state 21
    tipo_var                       shift and go to state 24

state 11

    (17) stmt -> declaracao . SEMICOLON

    SEMICOLON       shift and go to state 41


state 12

    (18) stmt -> atribuicao . SEMICOLON

    SEMICOLON       shift and go to state 42


state 13

    (19) stmt -> if_stmt .

    RETURN          reduce using rule 19 (stmt -> if_stmt .)
    COMMENT         reduce using rule 19 (stmt -> if_stmt .)
    C_CHANNEL       reduce using rule 19 (stmt -> if_stmt .)
    ID              reduce using rule 19 (stmt -> if_stmt .)
    IF              reduce using rule 19 (stmt -> if_stmt .)
    FOR             reduce using rule 19 (stmt -> if_stmt .)
    WHILE           reduce using rule 19 (stmt -> if_stmt .)
    DEF             reduce using rule 19 (stmt -> if_stmt .)
    INPUT           reduce using rule 19 (stmt -> if_stmt .)
    OUTPUT          reduce using rule 19 (stmt -> if_stmt .)
    BOOL            reduce using rule 19 (stmt -> if_stmt .)
    INT             reduce using rule 19 (stmt -> if_stmt .)
    FLOAT_TYPE      reduce using rule 19 (stmt -> if_stmt .)
    STRING_TYPE     reduce using rule 19 (stmt -> if_stmt .)
    LIST            reduce using rule 19 (stmt -> if_stmt .)
    RBRACE          reduce using rule 19 (stmt -> if_stmt .)


state 14

    (20) stmt -> for_stmt .

    RETURN          reduce using rule 20 (stmt -> for_stmt .)
    COMMENT         reduce using rule 20 (stmt -> for_stmt .)
    C_CHANNEL       reduce using rule 20 (stmt -> for_stmt .)
    ID              reduce using rule 20 (stmt -> for_stmt .)
    IF              reduce using rule 20 (stmt -> for_stmt .)
    FOR             reduce using rule 20 (stmt -> for_stmt .)
    WHILE           reduce using rule 20 (stmt -> for_stmt .)
    DEF             reduce using rule 20 (stmt -> for_stmt .)
    INPUT           reduce using rule 20 (stmt -> for_stmt .)
    OUTPUT          reduce using rule 20 (stmt -> for_stmt .)
    BOOL            reduce using rule 20 (stmt -> for_stmt .)
    INT             reduce using rule 20 (stmt -> for_stmt .)
    FLOAT_TYPE      reduce using rule 20 (stmt -> for_stmt .)
    STRING_TYPE     reduce using rule 20 (stmt -> for_stmt .)
    LIST            reduce using rule 20 (stmt -> for_stmt .)
    RBRACE          reduce using rule 20 (stmt -> for_stmt .)


state 15

    (21) stmt -> while_stmt .

    RETURN          reduce using rule 21 (stmt -> while_stmt .)
    COMMENT         reduce using rule 21 (stmt -> while_stmt .)
    C_CHANNEL       reduce using rule 21 (stmt -> while_stmt .)
    ID              reduce using rule 21 (stmt -> while_stmt .)
    IF              reduce using rule 21 (stmt -> while_stmt .)
    FOR             reduce using rule 21 (stmt -> while_stmt .)
    WHILE           reduce using rule 21 (stmt -> while_stmt .)
    DEF             reduce using rule 21 (stmt -> while_stmt .)
    INPUT           reduce using rule 21 (stmt -> while_stmt .)
    OUTPUT          reduce using rule 21 (stmt -> while_stmt .)
    BOOL            reduce using rule 21 (stmt -> while_stmt .)
    INT             reduce using rule 21 (stmt -> while_stmt .)
    FLOAT_TYPE      reduce using rule 21 (stmt -> while_stmt .)
    STRING_TYPE     reduce using rule 21 (stmt -> while_stmt .)
    LIST            reduce using rule 21 (stmt -> while_stmt .)
    RBRACE          reduce using rule 21 (stmt -> while_stmt .)


state 16

    (22) stmt -> def_funcao .

    RETURN          reduce using rule 22 (stmt -> def_funcao .)
    COMMENT         reduce using rule 22 (stmt -> def_funcao .)
    C_CHANNEL       reduce using rule 22 (stmt -> def_funcao .)
    ID              reduce using rule 22 (stmt -> def_funcao .)
    IF              reduce using rule 22 (stmt -> def_funcao .)
    FOR             reduce using rule 22 (stmt -> def_funcao .)
    WHILE           reduce using rule 22 (stmt -> def_funcao .)
    DEF             reduce using rule 22 (stmt -> def_funcao .)
    INPUT           reduce using rule 22 (stmt -> def_funcao .)
    OUTPUT          reduce using rule 22 (stmt -> def_funcao .)
    BOOL            reduce using rule 22 (stmt -> def_funcao .)
    INT             reduce using rule 22 (stmt -> def_funcao .)
    FLOAT_TYPE      reduce using rule 22 (stmt -> def_funcao .)
    STRING_TYPE     reduce using rule 22 (stmt -> def_funcao .)
    LIST            reduce using rule 22 (stmt -> def_funcao .)
    RBRACE          reduce using rule 22 (stmt -> def_funcao .)


state 17

    (23) stmt -> input . SEMICOLON

    SEMICOLON       shift and go to state 43


state 18

    (24) stmt -> output . SEMICOLON

    SEMICOLON       shift and go to state 44


state 19

    (25) stmt -> chamada_funcao . SEMICOLON

    SEMICOLON       shift and go to state 45


state 20

    (26) stmt -> receive_stmt .

    RETURN          reduce using rule 26 (stmt -> receive_stmt .)
    COMMENT         reduce using rule 26 (stmt -> receive_stmt .)
    C_CHANNEL       reduce using rule 26 (stmt -> receive_stmt .)
    ID              reduce using rule 26 (stmt -> receive_stmt .)
    IF              reduce using rule 26 (stmt -> receive_stmt .)
    FOR             reduce using rule 26 (stmt -> receive_stmt .)
    WHILE           reduce using rule 26 (stmt -> receive_stmt .)
    DEF             reduce using rule 26 (stmt -> receive_stmt .)
    INPUT           reduce using rule 26 (stmt -> receive_stmt .)
    OUTPUT          reduce using rule 26 (stmt -> receive_stmt .)
    BOOL            reduce using rule 26 (stmt -> receive_stmt .)
    INT             reduce using rule 26 (stmt -> receive_stmt .)
    FLOAT_TYPE      reduce using rule 26 (stmt -> receive_stmt .)
    STRING_TYPE     reduce using rule 26 (stmt -> receive_stmt .)
    LIST            reduce using rule 26 (stmt -> receive_stmt .)
    RBRACE          reduce using rule 26 (stmt -> receive_stmt .)


state 21

    (27) stmt -> send_stmt .

    RETURN          reduce using rule 27 (stmt -> send_stmt .)
    COMMENT         reduce using rule 27 (stmt -> send_stmt .)
    C_CHANNEL       reduce using rule 27 (stmt -> send_stmt .)
    ID              reduce using rule 27 (stmt -> send_stmt .)
    IF              reduce using rule 27 (stmt -> send_stmt .)
    FOR             reduce using rule 27 (stmt -> send_stmt .)
    WHILE           reduce using rule 27 (stmt -> send_stmt .)
    DEF             reduce using rule 27 (stmt -> send_stmt .)
    INPUT           reduce using rule 27 (stmt -> send_stmt .)
    OUTPUT          reduce using rule 27 (stmt -> send_stmt .)
    BOOL            reduce using rule 27 (stmt -> send_stmt .)
    INT             reduce using rule 27 (stmt -> send_stmt .)
    FLOAT_TYPE      reduce using rule 27 (stmt -> send_stmt .)
    STRING_TYPE     reduce using rule 27 (stmt -> send_stmt .)
    LIST            reduce using rule 27 (stmt -> send_stmt .)
    RBRACE          reduce using rule 27 (stmt -> send_stmt .)


state 22

    (28) stmt -> RETURN . expr SEMICOLON
    (40) expr -> . INPUT LPAREN args RPAREN
    (41) expr -> . OUTPUT LPAREN args RPAREN
    (45) expr -> . chamada_funcao
    (46) expr -> . expr_binop
    (47) expr -> . expr_comparacao
    (48) expr -> . expr_lista
    (49) expr -> . expr_simples
    (42) chamada_funcao -> . ID LPAREN args RPAREN
    (50) expr_binop -> . expr PLUS expr
    (51) expr_binop -> . expr MINUS expr
    (52) expr_binop -> . expr MULT expr
    (53) expr_binop -> . expr DIV expr
    (54) expr_comparacao -> . expr LT expr
    (55) expr_comparacao -> . expr LE expr
    (56) expr_comparacao -> . expr GT expr
    (57) expr_comparacao -> . expr GE expr
    (58) expr_comparacao -> . expr EQ expr
    (59) expr_comparacao -> . expr NE expr
    (60) expr_lista -> . LBRACKET expr_list RBRACKET
    (63) expr_simples -> . ID
    (64) expr_simples -> . NUM
    (65) expr_simples -> . FLOAT
    (66) expr_simples -> . STRING
    (67) expr_simples -> . TRUE
    (68) expr_simples -> . FALSE
    (69) expr_simples -> . ID DOT ID

    INPUT           shift and go to state 47
    OUTPUT          shift and go to state 48
    ID              shift and go to state 54
    LBRACKET        shift and go to state 55
    NUM             shift and go to state 56
    FLOAT           shift and go to state 57
    STRING          shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60

    expr                           shift and go to state 46
    chamada_funcao                 shift and go to state 49
    expr_binop                     shift and go to state 50
    expr_comparacao                shift and go to state 51
    expr_lista                     shift and go to state 52
    expr_simples                   shift and go to state 53

state 23

    (29) stmt -> COMMENT .

    RETURN          reduce using rule 29 (stmt -> COMMENT .)
    COMMENT         reduce using rule 29 (stmt -> COMMENT .)
    C_CHANNEL       reduce using rule 29 (stmt -> COMMENT .)
    ID              reduce using rule 29 (stmt -> COMMENT .)
    IF              reduce using rule 29 (stmt -> COMMENT .)
    FOR             reduce using rule 29 (stmt -> COMMENT .)
    WHILE           reduce using rule 29 (stmt -> COMMENT .)
    DEF             reduce using rule 29 (stmt -> COMMENT .)
    INPUT           reduce using rule 29 (stmt -> COMMENT .)
    OUTPUT          reduce using rule 29 (stmt -> COMMENT .)
    BOOL            reduce using rule 29 (stmt -> COMMENT .)
    INT             reduce using rule 29 (stmt -> COMMENT .)
    FLOAT_TYPE      reduce using rule 29 (stmt -> COMMENT .)
    STRING_TYPE     reduce using rule 29 (stmt -> COMMENT .)
    LIST            reduce using rule 29 (stmt -> COMMENT .)
    RBRACE          reduce using rule 29 (stmt -> COMMENT .)


state 24

    (14) declaracao -> tipo_var . ID ASSIGN expr

    ID              shift and go to state 61


state 25

    (16) atribuicao -> ID . ASSIGN expr
    (42) chamada_funcao -> ID . LPAREN args RPAREN
    (34) receive_stmt -> ID . DOT RECEIVE COLON expr SEMICOLON
    (35) send_stmt -> ID . DOT SEND COLON expr SEMICOLON

    ASSIGN          shift and go to state 62
    LPAREN          shift and go to state 63
    DOT             shift and go to state 64


state 26

    (15) declaracao -> C_CHANNEL . ASSIGN ID STRING NUM SEMICOLON
    (12) tipo_var -> C_CHANNEL .

    ASSIGN          shift and go to state 65
    ID              reduce using rule 12 (tipo_var -> C_CHANNEL .)


state 27

    (70) if_stmt -> IF . LPAREN expr RPAREN LBRACE stmts RBRACE
    (71) if_stmt -> IF . LPAREN expr RPAREN LBRACE stmts RBRACE ELSE LBRACE stmts RBRACE

    LPAREN          shift and go to state 66


state 28

    (30) for_stmt -> FOR . LPAREN ID IN expr RPAREN LBRACE stmts RBRACE

    LPAREN          shift and go to state 67


state 29

    (31) while_stmt -> WHILE . LPAREN expr RPAREN LBRACE stmts RBRACE

    LPAREN          shift and go to state 68


state 30

    (39) def_funcao -> DEF . ID LPAREN params RPAREN LBRACE stmts RBRACE

    ID              shift and go to state 69


state 31

    (32) input -> INPUT . LPAREN args RPAREN

    LPAREN          shift and go to state 70


state 32

    (33) output -> OUTPUT . LPAREN args RPAREN

    LPAREN          shift and go to state 71


state 33

    (8) tipo_var -> BOOL .

    ID              reduce using rule 8 (tipo_var -> BOOL .)
    GT              reduce using rule 8 (tipo_var -> BOOL .)


state 34

    (9) tipo_var -> INT .

    ID              reduce using rule 9 (tipo_var -> INT .)
    GT              reduce using rule 9 (tipo_var -> INT .)


state 35

    (10) tipo_var -> FLOAT_TYPE .

    ID              reduce using rule 10 (tipo_var -> FLOAT_TYPE .)
    GT              reduce using rule 10 (tipo_var -> FLOAT_TYPE .)


state 36

    (11) tipo_var -> STRING_TYPE .

    ID              reduce using rule 11 (tipo_var -> STRING_TYPE .)
    GT              reduce using rule 11 (tipo_var -> STRING_TYPE .)


state 37

    (13) tipo_var -> LIST . LT tipo_var GT

    LT              shift and go to state 72


state 38

    (5) bloco_PAR -> PAR LBRACE stmts . RBRACE

    RBRACE          shift and go to state 73


state 39

    (4) bloco_SEQ -> SEQ LBRACE stmts RBRACE .

    $end            reduce using rule 4 (bloco_SEQ -> SEQ LBRACE stmts RBRACE .)


state 40

    (7) stmts -> stmt stmts .

    RBRACE          reduce using rule 7 (stmts -> stmt stmts .)


state 41

    (17) stmt -> declaracao SEMICOLON .

    RETURN          reduce using rule 17 (stmt -> declaracao SEMICOLON .)
    COMMENT         reduce using rule 17 (stmt -> declaracao SEMICOLON .)
    C_CHANNEL       reduce using rule 17 (stmt -> declaracao SEMICOLON .)
    ID              reduce using rule 17 (stmt -> declaracao SEMICOLON .)
    IF              reduce using rule 17 (stmt -> declaracao SEMICOLON .)
    FOR             reduce using rule 17 (stmt -> declaracao SEMICOLON .)
    WHILE           reduce using rule 17 (stmt -> declaracao SEMICOLON .)
    DEF             reduce using rule 17 (stmt -> declaracao SEMICOLON .)
    INPUT           reduce using rule 17 (stmt -> declaracao SEMICOLON .)
    OUTPUT          reduce using rule 17 (stmt -> declaracao SEMICOLON .)
    BOOL            reduce using rule 17 (stmt -> declaracao SEMICOLON .)
    INT             reduce using rule 17 (stmt -> declaracao SEMICOLON .)
    FLOAT_TYPE      reduce using rule 17 (stmt -> declaracao SEMICOLON .)
    STRING_TYPE     reduce using rule 17 (stmt -> declaracao SEMICOLON .)
    LIST            reduce using rule 17 (stmt -> declaracao SEMICOLON .)
    RBRACE          reduce using rule 17 (stmt -> declaracao SEMICOLON .)


state 42

    (18) stmt -> atribuicao SEMICOLON .

    RETURN          reduce using rule 18 (stmt -> atribuicao SEMICOLON .)
    COMMENT         reduce using rule 18 (stmt -> atribuicao SEMICOLON .)
    C_CHANNEL       reduce using rule 18 (stmt -> atribuicao SEMICOLON .)
    ID              reduce using rule 18 (stmt -> atribuicao SEMICOLON .)
    IF              reduce using rule 18 (stmt -> atribuicao SEMICOLON .)
    FOR             reduce using rule 18 (stmt -> atribuicao SEMICOLON .)
    WHILE           reduce using rule 18 (stmt -> atribuicao SEMICOLON .)
    DEF             reduce using rule 18 (stmt -> atribuicao SEMICOLON .)
    INPUT           reduce using rule 18 (stmt -> atribuicao SEMICOLON .)
    OUTPUT          reduce using rule 18 (stmt -> atribuicao SEMICOLON .)
    BOOL            reduce using rule 18 (stmt -> atribuicao SEMICOLON .)
    INT             reduce using rule 18 (stmt -> atribuicao SEMICOLON .)
    FLOAT_TYPE      reduce using rule 18 (stmt -> atribuicao SEMICOLON .)
    STRING_TYPE     reduce using rule 18 (stmt -> atribuicao SEMICOLON .)
    LIST            reduce using rule 18 (stmt -> atribuicao SEMICOLON .)
    RBRACE          reduce using rule 18 (stmt -> atribuicao SEMICOLON .)


state 43

    (23) stmt -> input SEMICOLON .

    RETURN          reduce using rule 23 (stmt -> input SEMICOLON .)
    COMMENT         reduce using rule 23 (stmt -> input SEMICOLON .)
    C_CHANNEL       reduce using rule 23 (stmt -> input SEMICOLON .)
    ID              reduce using rule 23 (stmt -> input SEMICOLON .)
    IF              reduce using rule 23 (stmt -> input SEMICOLON .)
    FOR             reduce using rule 23 (stmt -> input SEMICOLON .)
    WHILE           reduce using rule 23 (stmt -> input SEMICOLON .)
    DEF             reduce using rule 23 (stmt -> input SEMICOLON .)
    INPUT           reduce using rule 23 (stmt -> input SEMICOLON .)
    OUTPUT          reduce using rule 23 (stmt -> input SEMICOLON .)
    BOOL            reduce using rule 23 (stmt -> input SEMICOLON .)
    INT             reduce using rule 23 (stmt -> input SEMICOLON .)
    FLOAT_TYPE      reduce using rule 23 (stmt -> input SEMICOLON .)
    STRING_TYPE     reduce using rule 23 (stmt -> input SEMICOLON .)
    LIST            reduce using rule 23 (stmt -> input SEMICOLON .)
    RBRACE          reduce using rule 23 (stmt -> input SEMICOLON .)


state 44

    (24) stmt -> output SEMICOLON .

    RETURN          reduce using rule 24 (stmt -> output SEMICOLON .)
    COMMENT         reduce using rule 24 (stmt -> output SEMICOLON .)
    C_CHANNEL       reduce using rule 24 (stmt -> output SEMICOLON .)
    ID              reduce using rule 24 (stmt -> output SEMICOLON .)
    IF              reduce using rule 24 (stmt -> output SEMICOLON .)
    FOR             reduce using rule 24 (stmt -> output SEMICOLON .)
    WHILE           reduce using rule 24 (stmt -> output SEMICOLON .)
    DEF             reduce using rule 24 (stmt -> output SEMICOLON .)
    INPUT           reduce using rule 24 (stmt -> output SEMICOLON .)
    OUTPUT          reduce using rule 24 (stmt -> output SEMICOLON .)
    BOOL            reduce using rule 24 (stmt -> output SEMICOLON .)
    INT             reduce using rule 24 (stmt -> output SEMICOLON .)
    FLOAT_TYPE      reduce using rule 24 (stmt -> output SEMICOLON .)
    STRING_TYPE     reduce using rule 24 (stmt -> output SEMICOLON .)
    LIST            reduce using rule 24 (stmt -> output SEMICOLON .)
    RBRACE          reduce using rule 24 (stmt -> output SEMICOLON .)


state 45

    (25) stmt -> chamada_funcao SEMICOLON .

    RETURN          reduce using rule 25 (stmt -> chamada_funcao SEMICOLON .)
    COMMENT         reduce using rule 25 (stmt -> chamada_funcao SEMICOLON .)
    C_CHANNEL       reduce using rule 25 (stmt -> chamada_funcao SEMICOLON .)
    ID              reduce using rule 25 (stmt -> chamada_funcao SEMICOLON .)
    IF              reduce using rule 25 (stmt -> chamada_funcao SEMICOLON .)
    FOR             reduce using rule 25 (stmt -> chamada_funcao SEMICOLON .)
    WHILE           reduce using rule 25 (stmt -> chamada_funcao SEMICOLON .)
    DEF             reduce using rule 25 (stmt -> chamada_funcao SEMICOLON .)
    INPUT           reduce using rule 25 (stmt -> chamada_funcao SEMICOLON .)
    OUTPUT          reduce using rule 25 (stmt -> chamada_funcao SEMICOLON .)
    BOOL            reduce using rule 25 (stmt -> chamada_funcao SEMICOLON .)
    INT             reduce using rule 25 (stmt -> chamada_funcao SEMICOLON .)
    FLOAT_TYPE      reduce using rule 25 (stmt -> chamada_funcao SEMICOLON .)
    STRING_TYPE     reduce using rule 25 (stmt -> chamada_funcao SEMICOLON .)
    LIST            reduce using rule 25 (stmt -> chamada_funcao SEMICOLON .)
    RBRACE          reduce using rule 25 (stmt -> chamada_funcao SEMICOLON .)


state 46

    (28) stmt -> RETURN expr . SEMICOLON
    (50) expr_binop -> expr . PLUS expr
    (51) expr_binop -> expr . MINUS expr
    (52) expr_binop -> expr . MULT expr
    (53) expr_binop -> expr . DIV expr
    (54) expr_comparacao -> expr . LT expr
    (55) expr_comparacao -> expr . LE expr
    (56) expr_comparacao -> expr . GT expr
    (57) expr_comparacao -> expr . GE expr
    (58) expr_comparacao -> expr . EQ expr
    (59) expr_comparacao -> expr . NE expr

    SEMICOLON       shift and go to state 74
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    MULT            shift and go to state 77
    DIV             shift and go to state 78
    LT              shift and go to state 79
    LE              shift and go to state 80
    GT              shift and go to state 81
    GE              shift and go to state 82
    EQ              shift and go to state 83
    NE              shift and go to state 84


state 47

    (40) expr -> INPUT . LPAREN args RPAREN

    LPAREN          shift and go to state 85


state 48

    (41) expr -> OUTPUT . LPAREN args RPAREN

    LPAREN          shift and go to state 86


state 49

    (45) expr -> chamada_funcao .

    SEMICOLON       reduce using rule 45 (expr -> chamada_funcao .)
    PLUS            reduce using rule 45 (expr -> chamada_funcao .)
    MINUS           reduce using rule 45 (expr -> chamada_funcao .)
    MULT            reduce using rule 45 (expr -> chamada_funcao .)
    DIV             reduce using rule 45 (expr -> chamada_funcao .)
    LT              reduce using rule 45 (expr -> chamada_funcao .)
    LE              reduce using rule 45 (expr -> chamada_funcao .)
    GT              reduce using rule 45 (expr -> chamada_funcao .)
    GE              reduce using rule 45 (expr -> chamada_funcao .)
    EQ              reduce using rule 45 (expr -> chamada_funcao .)
    NE              reduce using rule 45 (expr -> chamada_funcao .)
    COMMA           reduce using rule 45 (expr -> chamada_funcao .)
    RBRACKET        reduce using rule 45 (expr -> chamada_funcao .)
    RPAREN          reduce using rule 45 (expr -> chamada_funcao .)


state 50

    (46) expr -> expr_binop .

    SEMICOLON       reduce using rule 46 (expr -> expr_binop .)
    PLUS            reduce using rule 46 (expr -> expr_binop .)
    MINUS           reduce using rule 46 (expr -> expr_binop .)
    MULT            reduce using rule 46 (expr -> expr_binop .)
    DIV             reduce using rule 46 (expr -> expr_binop .)
    LT              reduce using rule 46 (expr -> expr_binop .)
    LE              reduce using rule 46 (expr -> expr_binop .)
    GT              reduce using rule 46 (expr -> expr_binop .)
    GE              reduce using rule 46 (expr -> expr_binop .)
    EQ              reduce using rule 46 (expr -> expr_binop .)
    NE              reduce using rule 46 (expr -> expr_binop .)
    COMMA           reduce using rule 46 (expr -> expr_binop .)
    RBRACKET        reduce using rule 46 (expr -> expr_binop .)
    RPAREN          reduce using rule 46 (expr -> expr_binop .)


state 51

    (47) expr -> expr_comparacao .

    SEMICOLON       reduce using rule 47 (expr -> expr_comparacao .)
    PLUS            reduce using rule 47 (expr -> expr_comparacao .)
    MINUS           reduce using rule 47 (expr -> expr_comparacao .)
    MULT            reduce using rule 47 (expr -> expr_comparacao .)
    DIV             reduce using rule 47 (expr -> expr_comparacao .)
    LT              reduce using rule 47 (expr -> expr_comparacao .)
    LE              reduce using rule 47 (expr -> expr_comparacao .)
    GT              reduce using rule 47 (expr -> expr_comparacao .)
    GE              reduce using rule 47 (expr -> expr_comparacao .)
    EQ              reduce using rule 47 (expr -> expr_comparacao .)
    NE              reduce using rule 47 (expr -> expr_comparacao .)
    COMMA           reduce using rule 47 (expr -> expr_comparacao .)
    RBRACKET        reduce using rule 47 (expr -> expr_comparacao .)
    RPAREN          reduce using rule 47 (expr -> expr_comparacao .)


state 52

    (48) expr -> expr_lista .

    SEMICOLON       reduce using rule 48 (expr -> expr_lista .)
    PLUS            reduce using rule 48 (expr -> expr_lista .)
    MINUS           reduce using rule 48 (expr -> expr_lista .)
    MULT            reduce using rule 48 (expr -> expr_lista .)
    DIV             reduce using rule 48 (expr -> expr_lista .)
    LT              reduce using rule 48 (expr -> expr_lista .)
    LE              reduce using rule 48 (expr -> expr_lista .)
    GT              reduce using rule 48 (expr -> expr_lista .)
    GE              reduce using rule 48 (expr -> expr_lista .)
    EQ              reduce using rule 48 (expr -> expr_lista .)
    NE              reduce using rule 48 (expr -> expr_lista .)
    COMMA           reduce using rule 48 (expr -> expr_lista .)
    RBRACKET        reduce using rule 48 (expr -> expr_lista .)
    RPAREN          reduce using rule 48 (expr -> expr_lista .)


state 53

    (49) expr -> expr_simples .

    SEMICOLON       reduce using rule 49 (expr -> expr_simples .)
    PLUS            reduce using rule 49 (expr -> expr_simples .)
    MINUS           reduce using rule 49 (expr -> expr_simples .)
    MULT            reduce using rule 49 (expr -> expr_simples .)
    DIV             reduce using rule 49 (expr -> expr_simples .)
    LT              reduce using rule 49 (expr -> expr_simples .)
    LE              reduce using rule 49 (expr -> expr_simples .)
    GT              reduce using rule 49 (expr -> expr_simples .)
    GE              reduce using rule 49 (expr -> expr_simples .)
    EQ              reduce using rule 49 (expr -> expr_simples .)
    NE              reduce using rule 49 (expr -> expr_simples .)
    COMMA           reduce using rule 49 (expr -> expr_simples .)
    RBRACKET        reduce using rule 49 (expr -> expr_simples .)
    RPAREN          reduce using rule 49 (expr -> expr_simples .)


state 54

    (42) chamada_funcao -> ID . LPAREN args RPAREN
    (63) expr_simples -> ID .
    (69) expr_simples -> ID . DOT ID

    LPAREN          shift and go to state 63
    SEMICOLON       reduce using rule 63 (expr_simples -> ID .)
    PLUS            reduce using rule 63 (expr_simples -> ID .)
    MINUS           reduce using rule 63 (expr_simples -> ID .)
    MULT            reduce using rule 63 (expr_simples -> ID .)
    DIV             reduce using rule 63 (expr_simples -> ID .)
    LT              reduce using rule 63 (expr_simples -> ID .)
    LE              reduce using rule 63 (expr_simples -> ID .)
    GT              reduce using rule 63 (expr_simples -> ID .)
    GE              reduce using rule 63 (expr_simples -> ID .)
    EQ              reduce using rule 63 (expr_simples -> ID .)
    NE              reduce using rule 63 (expr_simples -> ID .)
    COMMA           reduce using rule 63 (expr_simples -> ID .)
    RBRACKET        reduce using rule 63 (expr_simples -> ID .)
    RPAREN          reduce using rule 63 (expr_simples -> ID .)
    DOT             shift and go to state 87


state 55

    (60) expr_lista -> LBRACKET . expr_list RBRACKET
    (61) expr_list -> . expr
    (62) expr_list -> . expr COMMA expr_list
    (40) expr -> . INPUT LPAREN args RPAREN
    (41) expr -> . OUTPUT LPAREN args RPAREN
    (45) expr -> . chamada_funcao
    (46) expr -> . expr_binop
    (47) expr -> . expr_comparacao
    (48) expr -> . expr_lista
    (49) expr -> . expr_simples
    (42) chamada_funcao -> . ID LPAREN args RPAREN
    (50) expr_binop -> . expr PLUS expr
    (51) expr_binop -> . expr MINUS expr
    (52) expr_binop -> . expr MULT expr
    (53) expr_binop -> . expr DIV expr
    (54) expr_comparacao -> . expr LT expr
    (55) expr_comparacao -> . expr LE expr
    (56) expr_comparacao -> . expr GT expr
    (57) expr_comparacao -> . expr GE expr
    (58) expr_comparacao -> . expr EQ expr
    (59) expr_comparacao -> . expr NE expr
    (60) expr_lista -> . LBRACKET expr_list RBRACKET
    (63) expr_simples -> . ID
    (64) expr_simples -> . NUM
    (65) expr_simples -> . FLOAT
    (66) expr_simples -> . STRING
    (67) expr_simples -> . TRUE
    (68) expr_simples -> . FALSE
    (69) expr_simples -> . ID DOT ID

    INPUT           shift and go to state 47
    OUTPUT          shift and go to state 48
    ID              shift and go to state 54
    LBRACKET        shift and go to state 55
    NUM             shift and go to state 56
    FLOAT           shift and go to state 57
    STRING          shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60

    expr_list                      shift and go to state 88
    expr                           shift and go to state 89
    chamada_funcao                 shift and go to state 49
    expr_binop                     shift and go to state 50
    expr_comparacao                shift and go to state 51
    expr_lista                     shift and go to state 52
    expr_simples                   shift and go to state 53

state 56

    (64) expr_simples -> NUM .

    SEMICOLON       reduce using rule 64 (expr_simples -> NUM .)
    PLUS            reduce using rule 64 (expr_simples -> NUM .)
    MINUS           reduce using rule 64 (expr_simples -> NUM .)
    MULT            reduce using rule 64 (expr_simples -> NUM .)
    DIV             reduce using rule 64 (expr_simples -> NUM .)
    LT              reduce using rule 64 (expr_simples -> NUM .)
    LE              reduce using rule 64 (expr_simples -> NUM .)
    GT              reduce using rule 64 (expr_simples -> NUM .)
    GE              reduce using rule 64 (expr_simples -> NUM .)
    EQ              reduce using rule 64 (expr_simples -> NUM .)
    NE              reduce using rule 64 (expr_simples -> NUM .)
    COMMA           reduce using rule 64 (expr_simples -> NUM .)
    RBRACKET        reduce using rule 64 (expr_simples -> NUM .)
    RPAREN          reduce using rule 64 (expr_simples -> NUM .)


state 57

    (65) expr_simples -> FLOAT .

    SEMICOLON       reduce using rule 65 (expr_simples -> FLOAT .)
    PLUS            reduce using rule 65 (expr_simples -> FLOAT .)
    MINUS           reduce using rule 65 (expr_simples -> FLOAT .)
    MULT            reduce using rule 65 (expr_simples -> FLOAT .)
    DIV             reduce using rule 65 (expr_simples -> FLOAT .)
    LT              reduce using rule 65 (expr_simples -> FLOAT .)
    LE              reduce using rule 65 (expr_simples -> FLOAT .)
    GT              reduce using rule 65 (expr_simples -> FLOAT .)
    GE              reduce using rule 65 (expr_simples -> FLOAT .)
    EQ              reduce using rule 65 (expr_simples -> FLOAT .)
    NE              reduce using rule 65 (expr_simples -> FLOAT .)
    COMMA           reduce using rule 65 (expr_simples -> FLOAT .)
    RBRACKET        reduce using rule 65 (expr_simples -> FLOAT .)
    RPAREN          reduce using rule 65 (expr_simples -> FLOAT .)


state 58

    (66) expr_simples -> STRING .

    SEMICOLON       reduce using rule 66 (expr_simples -> STRING .)
    PLUS            reduce using rule 66 (expr_simples -> STRING .)
    MINUS           reduce using rule 66 (expr_simples -> STRING .)
    MULT            reduce using rule 66 (expr_simples -> STRING .)
    DIV             reduce using rule 66 (expr_simples -> STRING .)
    LT              reduce using rule 66 (expr_simples -> STRING .)
    LE              reduce using rule 66 (expr_simples -> STRING .)
    GT              reduce using rule 66 (expr_simples -> STRING .)
    GE              reduce using rule 66 (expr_simples -> STRING .)
    EQ              reduce using rule 66 (expr_simples -> STRING .)
    NE              reduce using rule 66 (expr_simples -> STRING .)
    COMMA           reduce using rule 66 (expr_simples -> STRING .)
    RBRACKET        reduce using rule 66 (expr_simples -> STRING .)
    RPAREN          reduce using rule 66 (expr_simples -> STRING .)


state 59

    (67) expr_simples -> TRUE .

    SEMICOLON       reduce using rule 67 (expr_simples -> TRUE .)
    PLUS            reduce using rule 67 (expr_simples -> TRUE .)
    MINUS           reduce using rule 67 (expr_simples -> TRUE .)
    MULT            reduce using rule 67 (expr_simples -> TRUE .)
    DIV             reduce using rule 67 (expr_simples -> TRUE .)
    LT              reduce using rule 67 (expr_simples -> TRUE .)
    LE              reduce using rule 67 (expr_simples -> TRUE .)
    GT              reduce using rule 67 (expr_simples -> TRUE .)
    GE              reduce using rule 67 (expr_simples -> TRUE .)
    EQ              reduce using rule 67 (expr_simples -> TRUE .)
    NE              reduce using rule 67 (expr_simples -> TRUE .)
    COMMA           reduce using rule 67 (expr_simples -> TRUE .)
    RBRACKET        reduce using rule 67 (expr_simples -> TRUE .)
    RPAREN          reduce using rule 67 (expr_simples -> TRUE .)


state 60

    (68) expr_simples -> FALSE .

    SEMICOLON       reduce using rule 68 (expr_simples -> FALSE .)
    PLUS            reduce using rule 68 (expr_simples -> FALSE .)
    MINUS           reduce using rule 68 (expr_simples -> FALSE .)
    MULT            reduce using rule 68 (expr_simples -> FALSE .)
    DIV             reduce using rule 68 (expr_simples -> FALSE .)
    LT              reduce using rule 68 (expr_simples -> FALSE .)
    LE              reduce using rule 68 (expr_simples -> FALSE .)
    GT              reduce using rule 68 (expr_simples -> FALSE .)
    GE              reduce using rule 68 (expr_simples -> FALSE .)
    EQ              reduce using rule 68 (expr_simples -> FALSE .)
    NE              reduce using rule 68 (expr_simples -> FALSE .)
    COMMA           reduce using rule 68 (expr_simples -> FALSE .)
    RBRACKET        reduce using rule 68 (expr_simples -> FALSE .)
    RPAREN          reduce using rule 68 (expr_simples -> FALSE .)


state 61

    (14) declaracao -> tipo_var ID . ASSIGN expr

    ASSIGN          shift and go to state 90


state 62

    (16) atribuicao -> ID ASSIGN . expr
    (40) expr -> . INPUT LPAREN args RPAREN
    (41) expr -> . OUTPUT LPAREN args RPAREN
    (45) expr -> . chamada_funcao
    (46) expr -> . expr_binop
    (47) expr -> . expr_comparacao
    (48) expr -> . expr_lista
    (49) expr -> . expr_simples
    (42) chamada_funcao -> . ID LPAREN args RPAREN
    (50) expr_binop -> . expr PLUS expr
    (51) expr_binop -> . expr MINUS expr
    (52) expr_binop -> . expr MULT expr
    (53) expr_binop -> . expr DIV expr
    (54) expr_comparacao -> . expr LT expr
    (55) expr_comparacao -> . expr LE expr
    (56) expr_comparacao -> . expr GT expr
    (57) expr_comparacao -> . expr GE expr
    (58) expr_comparacao -> . expr EQ expr
    (59) expr_comparacao -> . expr NE expr
    (60) expr_lista -> . LBRACKET expr_list RBRACKET
    (63) expr_simples -> . ID
    (64) expr_simples -> . NUM
    (65) expr_simples -> . FLOAT
    (66) expr_simples -> . STRING
    (67) expr_simples -> . TRUE
    (68) expr_simples -> . FALSE
    (69) expr_simples -> . ID DOT ID

    INPUT           shift and go to state 47
    OUTPUT          shift and go to state 48
    ID              shift and go to state 54
    LBRACKET        shift and go to state 55
    NUM             shift and go to state 56
    FLOAT           shift and go to state 57
    STRING          shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60

    expr                           shift and go to state 91
    chamada_funcao                 shift and go to state 49
    expr_binop                     shift and go to state 50
    expr_comparacao                shift and go to state 51
    expr_lista                     shift and go to state 52
    expr_simples                   shift and go to state 53

state 63

    (42) chamada_funcao -> ID LPAREN . args RPAREN
    (43) args -> . expr_list
    (44) args -> .
    (61) expr_list -> . expr
    (62) expr_list -> . expr COMMA expr_list
    (40) expr -> . INPUT LPAREN args RPAREN
    (41) expr -> . OUTPUT LPAREN args RPAREN
    (45) expr -> . chamada_funcao
    (46) expr -> . expr_binop
    (47) expr -> . expr_comparacao
    (48) expr -> . expr_lista
    (49) expr -> . expr_simples
    (42) chamada_funcao -> . ID LPAREN args RPAREN
    (50) expr_binop -> . expr PLUS expr
    (51) expr_binop -> . expr MINUS expr
    (52) expr_binop -> . expr MULT expr
    (53) expr_binop -> . expr DIV expr
    (54) expr_comparacao -> . expr LT expr
    (55) expr_comparacao -> . expr LE expr
    (56) expr_comparacao -> . expr GT expr
    (57) expr_comparacao -> . expr GE expr
    (58) expr_comparacao -> . expr EQ expr
    (59) expr_comparacao -> . expr NE expr
    (60) expr_lista -> . LBRACKET expr_list RBRACKET
    (63) expr_simples -> . ID
    (64) expr_simples -> . NUM
    (65) expr_simples -> . FLOAT
    (66) expr_simples -> . STRING
    (67) expr_simples -> . TRUE
    (68) expr_simples -> . FALSE
    (69) expr_simples -> . ID DOT ID

    RPAREN          reduce using rule 44 (args -> .)
    INPUT           shift and go to state 47
    OUTPUT          shift and go to state 48
    ID              shift and go to state 54
    LBRACKET        shift and go to state 55
    NUM             shift and go to state 56
    FLOAT           shift and go to state 57
    STRING          shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60

    args                           shift and go to state 92
    expr_list                      shift and go to state 93
    expr                           shift and go to state 89
    chamada_funcao                 shift and go to state 49
    expr_binop                     shift and go to state 50
    expr_comparacao                shift and go to state 51
    expr_lista                     shift and go to state 52
    expr_simples                   shift and go to state 53

state 64

    (34) receive_stmt -> ID DOT . RECEIVE COLON expr SEMICOLON
    (35) send_stmt -> ID DOT . SEND COLON expr SEMICOLON

    RECEIVE         shift and go to state 94
    SEND            shift and go to state 95


state 65

    (15) declaracao -> C_CHANNEL ASSIGN . ID STRING NUM SEMICOLON

    ID              shift and go to state 96


state 66

    (70) if_stmt -> IF LPAREN . expr RPAREN LBRACE stmts RBRACE
    (71) if_stmt -> IF LPAREN . expr RPAREN LBRACE stmts RBRACE ELSE LBRACE stmts RBRACE
    (40) expr -> . INPUT LPAREN args RPAREN
    (41) expr -> . OUTPUT LPAREN args RPAREN
    (45) expr -> . chamada_funcao
    (46) expr -> . expr_binop
    (47) expr -> . expr_comparacao
    (48) expr -> . expr_lista
    (49) expr -> . expr_simples
    (42) chamada_funcao -> . ID LPAREN args RPAREN
    (50) expr_binop -> . expr PLUS expr
    (51) expr_binop -> . expr MINUS expr
    (52) expr_binop -> . expr MULT expr
    (53) expr_binop -> . expr DIV expr
    (54) expr_comparacao -> . expr LT expr
    (55) expr_comparacao -> . expr LE expr
    (56) expr_comparacao -> . expr GT expr
    (57) expr_comparacao -> . expr GE expr
    (58) expr_comparacao -> . expr EQ expr
    (59) expr_comparacao -> . expr NE expr
    (60) expr_lista -> . LBRACKET expr_list RBRACKET
    (63) expr_simples -> . ID
    (64) expr_simples -> . NUM
    (65) expr_simples -> . FLOAT
    (66) expr_simples -> . STRING
    (67) expr_simples -> . TRUE
    (68) expr_simples -> . FALSE
    (69) expr_simples -> . ID DOT ID

    INPUT           shift and go to state 47
    OUTPUT          shift and go to state 48
    ID              shift and go to state 54
    LBRACKET        shift and go to state 55
    NUM             shift and go to state 56
    FLOAT           shift and go to state 57
    STRING          shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60

    expr                           shift and go to state 97
    chamada_funcao                 shift and go to state 49
    expr_binop                     shift and go to state 50
    expr_comparacao                shift and go to state 51
    expr_lista                     shift and go to state 52
    expr_simples                   shift and go to state 53

state 67

    (30) for_stmt -> FOR LPAREN . ID IN expr RPAREN LBRACE stmts RBRACE

    ID              shift and go to state 98


state 68

    (31) while_stmt -> WHILE LPAREN . expr RPAREN LBRACE stmts RBRACE
    (40) expr -> . INPUT LPAREN args RPAREN
    (41) expr -> . OUTPUT LPAREN args RPAREN
    (45) expr -> . chamada_funcao
    (46) expr -> . expr_binop
    (47) expr -> . expr_comparacao
    (48) expr -> . expr_lista
    (49) expr -> . expr_simples
    (42) chamada_funcao -> . ID LPAREN args RPAREN
    (50) expr_binop -> . expr PLUS expr
    (51) expr_binop -> . expr MINUS expr
    (52) expr_binop -> . expr MULT expr
    (53) expr_binop -> . expr DIV expr
    (54) expr_comparacao -> . expr LT expr
    (55) expr_comparacao -> . expr LE expr
    (56) expr_comparacao -> . expr GT expr
    (57) expr_comparacao -> . expr GE expr
    (58) expr_comparacao -> . expr EQ expr
    (59) expr_comparacao -> . expr NE expr
    (60) expr_lista -> . LBRACKET expr_list RBRACKET
    (63) expr_simples -> . ID
    (64) expr_simples -> . NUM
    (65) expr_simples -> . FLOAT
    (66) expr_simples -> . STRING
    (67) expr_simples -> . TRUE
    (68) expr_simples -> . FALSE
    (69) expr_simples -> . ID DOT ID

    INPUT           shift and go to state 47
    OUTPUT          shift and go to state 48
    ID              shift and go to state 54
    LBRACKET        shift and go to state 55
    NUM             shift and go to state 56
    FLOAT           shift and go to state 57
    STRING          shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60

    expr                           shift and go to state 99
    chamada_funcao                 shift and go to state 49
    expr_binop                     shift and go to state 50
    expr_comparacao                shift and go to state 51
    expr_lista                     shift and go to state 52
    expr_simples                   shift and go to state 53

state 69

    (39) def_funcao -> DEF ID . LPAREN params RPAREN LBRACE stmts RBRACE

    LPAREN          shift and go to state 100


state 70

    (32) input -> INPUT LPAREN . args RPAREN
    (43) args -> . expr_list
    (44) args -> .
    (61) expr_list -> . expr
    (62) expr_list -> . expr COMMA expr_list
    (40) expr -> . INPUT LPAREN args RPAREN
    (41) expr -> . OUTPUT LPAREN args RPAREN
    (45) expr -> . chamada_funcao
    (46) expr -> . expr_binop
    (47) expr -> . expr_comparacao
    (48) expr -> . expr_lista
    (49) expr -> . expr_simples
    (42) chamada_funcao -> . ID LPAREN args RPAREN
    (50) expr_binop -> . expr PLUS expr
    (51) expr_binop -> . expr MINUS expr
    (52) expr_binop -> . expr MULT expr
    (53) expr_binop -> . expr DIV expr
    (54) expr_comparacao -> . expr LT expr
    (55) expr_comparacao -> . expr LE expr
    (56) expr_comparacao -> . expr GT expr
    (57) expr_comparacao -> . expr GE expr
    (58) expr_comparacao -> . expr EQ expr
    (59) expr_comparacao -> . expr NE expr
    (60) expr_lista -> . LBRACKET expr_list RBRACKET
    (63) expr_simples -> . ID
    (64) expr_simples -> . NUM
    (65) expr_simples -> . FLOAT
    (66) expr_simples -> . STRING
    (67) expr_simples -> . TRUE
    (68) expr_simples -> . FALSE
    (69) expr_simples -> . ID DOT ID

    RPAREN          reduce using rule 44 (args -> .)
    INPUT           shift and go to state 47
    OUTPUT          shift and go to state 48
    ID              shift and go to state 54
    LBRACKET        shift and go to state 55
    NUM             shift and go to state 56
    FLOAT           shift and go to state 57
    STRING          shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60

    args                           shift and go to state 101
    expr_list                      shift and go to state 93
    expr                           shift and go to state 89
    chamada_funcao                 shift and go to state 49
    expr_binop                     shift and go to state 50
    expr_comparacao                shift and go to state 51
    expr_lista                     shift and go to state 52
    expr_simples                   shift and go to state 53

state 71

    (33) output -> OUTPUT LPAREN . args RPAREN
    (43) args -> . expr_list
    (44) args -> .
    (61) expr_list -> . expr
    (62) expr_list -> . expr COMMA expr_list
    (40) expr -> . INPUT LPAREN args RPAREN
    (41) expr -> . OUTPUT LPAREN args RPAREN
    (45) expr -> . chamada_funcao
    (46) expr -> . expr_binop
    (47) expr -> . expr_comparacao
    (48) expr -> . expr_lista
    (49) expr -> . expr_simples
    (42) chamada_funcao -> . ID LPAREN args RPAREN
    (50) expr_binop -> . expr PLUS expr
    (51) expr_binop -> . expr MINUS expr
    (52) expr_binop -> . expr MULT expr
    (53) expr_binop -> . expr DIV expr
    (54) expr_comparacao -> . expr LT expr
    (55) expr_comparacao -> . expr LE expr
    (56) expr_comparacao -> . expr GT expr
    (57) expr_comparacao -> . expr GE expr
    (58) expr_comparacao -> . expr EQ expr
    (59) expr_comparacao -> . expr NE expr
    (60) expr_lista -> . LBRACKET expr_list RBRACKET
    (63) expr_simples -> . ID
    (64) expr_simples -> . NUM
    (65) expr_simples -> . FLOAT
    (66) expr_simples -> . STRING
    (67) expr_simples -> . TRUE
    (68) expr_simples -> . FALSE
    (69) expr_simples -> . ID DOT ID

    RPAREN          reduce using rule 44 (args -> .)
    INPUT           shift and go to state 47
    OUTPUT          shift and go to state 48
    ID              shift and go to state 54
    LBRACKET        shift and go to state 55
    NUM             shift and go to state 56
    FLOAT           shift and go to state 57
    STRING          shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60

    args                           shift and go to state 102
    expr_list                      shift and go to state 93
    expr                           shift and go to state 89
    chamada_funcao                 shift and go to state 49
    expr_binop                     shift and go to state 50
    expr_comparacao                shift and go to state 51
    expr_lista                     shift and go to state 52
    expr_simples                   shift and go to state 53

state 72

    (13) tipo_var -> LIST LT . tipo_var GT
    (8) tipo_var -> . BOOL
    (9) tipo_var -> . INT
    (10) tipo_var -> . FLOAT_TYPE
    (11) tipo_var -> . STRING_TYPE
    (12) tipo_var -> . C_CHANNEL
    (13) tipo_var -> . LIST LT tipo_var GT

    BOOL            shift and go to state 33
    INT             shift and go to state 34
    FLOAT_TYPE      shift and go to state 35
    STRING_TYPE     shift and go to state 36
    C_CHANNEL       shift and go to state 104
    LIST            shift and go to state 37

    tipo_var                       shift and go to state 103

state 73

    (5) bloco_PAR -> PAR LBRACE stmts RBRACE .

    $end            reduce using rule 5 (bloco_PAR -> PAR LBRACE stmts RBRACE .)


state 74

    (28) stmt -> RETURN expr SEMICOLON .

    RETURN          reduce using rule 28 (stmt -> RETURN expr SEMICOLON .)
    COMMENT         reduce using rule 28 (stmt -> RETURN expr SEMICOLON .)
    C_CHANNEL       reduce using rule 28 (stmt -> RETURN expr SEMICOLON .)
    ID              reduce using rule 28 (stmt -> RETURN expr SEMICOLON .)
    IF              reduce using rule 28 (stmt -> RETURN expr SEMICOLON .)
    FOR             reduce using rule 28 (stmt -> RETURN expr SEMICOLON .)
    WHILE           reduce using rule 28 (stmt -> RETURN expr SEMICOLON .)
    DEF             reduce using rule 28 (stmt -> RETURN expr SEMICOLON .)
    INPUT           reduce using rule 28 (stmt -> RETURN expr SEMICOLON .)
    OUTPUT          reduce using rule 28 (stmt -> RETURN expr SEMICOLON .)
    BOOL            reduce using rule 28 (stmt -> RETURN expr SEMICOLON .)
    INT             reduce using rule 28 (stmt -> RETURN expr SEMICOLON .)
    FLOAT_TYPE      reduce using rule 28 (stmt -> RETURN expr SEMICOLON .)
    STRING_TYPE     reduce using rule 28 (stmt -> RETURN expr SEMICOLON .)
    LIST            reduce using rule 28 (stmt -> RETURN expr SEMICOLON .)
    RBRACE          reduce using rule 28 (stmt -> RETURN expr SEMICOLON .)


state 75

    (50) expr_binop -> expr PLUS . expr
    (40) expr -> . INPUT LPAREN args RPAREN
    (41) expr -> . OUTPUT LPAREN args RPAREN
    (45) expr -> . chamada_funcao
    (46) expr -> . expr_binop
    (47) expr -> . expr_comparacao
    (48) expr -> . expr_lista
    (49) expr -> . expr_simples
    (42) chamada_funcao -> . ID LPAREN args RPAREN
    (50) expr_binop -> . expr PLUS expr
    (51) expr_binop -> . expr MINUS expr
    (52) expr_binop -> . expr MULT expr
    (53) expr_binop -> . expr DIV expr
    (54) expr_comparacao -> . expr LT expr
    (55) expr_comparacao -> . expr LE expr
    (56) expr_comparacao -> . expr GT expr
    (57) expr_comparacao -> . expr GE expr
    (58) expr_comparacao -> . expr EQ expr
    (59) expr_comparacao -> . expr NE expr
    (60) expr_lista -> . LBRACKET expr_list RBRACKET
    (63) expr_simples -> . ID
    (64) expr_simples -> . NUM
    (65) expr_simples -> . FLOAT
    (66) expr_simples -> . STRING
    (67) expr_simples -> . TRUE
    (68) expr_simples -> . FALSE
    (69) expr_simples -> . ID DOT ID

    INPUT           shift and go to state 47
    OUTPUT          shift and go to state 48
    ID              shift and go to state 54
    LBRACKET        shift and go to state 55
    NUM             shift and go to state 56
    FLOAT           shift and go to state 57
    STRING          shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60

    expr                           shift and go to state 105
    chamada_funcao                 shift and go to state 49
    expr_binop                     shift and go to state 50
    expr_comparacao                shift and go to state 51
    expr_lista                     shift and go to state 52
    expr_simples                   shift and go to state 53

state 76

    (51) expr_binop -> expr MINUS . expr
    (40) expr -> . INPUT LPAREN args RPAREN
    (41) expr -> . OUTPUT LPAREN args RPAREN
    (45) expr -> . chamada_funcao
    (46) expr -> . expr_binop
    (47) expr -> . expr_comparacao
    (48) expr -> . expr_lista
    (49) expr -> . expr_simples
    (42) chamada_funcao -> . ID LPAREN args RPAREN
    (50) expr_binop -> . expr PLUS expr
    (51) expr_binop -> . expr MINUS expr
    (52) expr_binop -> . expr MULT expr
    (53) expr_binop -> . expr DIV expr
    (54) expr_comparacao -> . expr LT expr
    (55) expr_comparacao -> . expr LE expr
    (56) expr_comparacao -> . expr GT expr
    (57) expr_comparacao -> . expr GE expr
    (58) expr_comparacao -> . expr EQ expr
    (59) expr_comparacao -> . expr NE expr
    (60) expr_lista -> . LBRACKET expr_list RBRACKET
    (63) expr_simples -> . ID
    (64) expr_simples -> . NUM
    (65) expr_simples -> . FLOAT
    (66) expr_simples -> . STRING
    (67) expr_simples -> . TRUE
    (68) expr_simples -> . FALSE
    (69) expr_simples -> . ID DOT ID

    INPUT           shift and go to state 47
    OUTPUT          shift and go to state 48
    ID              shift and go to state 54
    LBRACKET        shift and go to state 55
    NUM             shift and go to state 56
    FLOAT           shift and go to state 57
    STRING          shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60

    expr                           shift and go to state 106
    chamada_funcao                 shift and go to state 49
    expr_binop                     shift and go to state 50
    expr_comparacao                shift and go to state 51
    expr_lista                     shift and go to state 52
    expr_simples                   shift and go to state 53

state 77

    (52) expr_binop -> expr MULT . expr
    (40) expr -> . INPUT LPAREN args RPAREN
    (41) expr -> . OUTPUT LPAREN args RPAREN
    (45) expr -> . chamada_funcao
    (46) expr -> . expr_binop
    (47) expr -> . expr_comparacao
    (48) expr -> . expr_lista
    (49) expr -> . expr_simples
    (42) chamada_funcao -> . ID LPAREN args RPAREN
    (50) expr_binop -> . expr PLUS expr
    (51) expr_binop -> . expr MINUS expr
    (52) expr_binop -> . expr MULT expr
    (53) expr_binop -> . expr DIV expr
    (54) expr_comparacao -> . expr LT expr
    (55) expr_comparacao -> . expr LE expr
    (56) expr_comparacao -> . expr GT expr
    (57) expr_comparacao -> . expr GE expr
    (58) expr_comparacao -> . expr EQ expr
    (59) expr_comparacao -> . expr NE expr
    (60) expr_lista -> . LBRACKET expr_list RBRACKET
    (63) expr_simples -> . ID
    (64) expr_simples -> . NUM
    (65) expr_simples -> . FLOAT
    (66) expr_simples -> . STRING
    (67) expr_simples -> . TRUE
    (68) expr_simples -> . FALSE
    (69) expr_simples -> . ID DOT ID

    INPUT           shift and go to state 47
    OUTPUT          shift and go to state 48
    ID              shift and go to state 54
    LBRACKET        shift and go to state 55
    NUM             shift and go to state 56
    FLOAT           shift and go to state 57
    STRING          shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60

    expr                           shift and go to state 107
    chamada_funcao                 shift and go to state 49
    expr_binop                     shift and go to state 50
    expr_comparacao                shift and go to state 51
    expr_lista                     shift and go to state 52
    expr_simples                   shift and go to state 53

state 78

    (53) expr_binop -> expr DIV . expr
    (40) expr -> . INPUT LPAREN args RPAREN
    (41) expr -> . OUTPUT LPAREN args RPAREN
    (45) expr -> . chamada_funcao
    (46) expr -> . expr_binop
    (47) expr -> . expr_comparacao
    (48) expr -> . expr_lista
    (49) expr -> . expr_simples
    (42) chamada_funcao -> . ID LPAREN args RPAREN
    (50) expr_binop -> . expr PLUS expr
    (51) expr_binop -> . expr MINUS expr
    (52) expr_binop -> . expr MULT expr
    (53) expr_binop -> . expr DIV expr
    (54) expr_comparacao -> . expr LT expr
    (55) expr_comparacao -> . expr LE expr
    (56) expr_comparacao -> . expr GT expr
    (57) expr_comparacao -> . expr GE expr
    (58) expr_comparacao -> . expr EQ expr
    (59) expr_comparacao -> . expr NE expr
    (60) expr_lista -> . LBRACKET expr_list RBRACKET
    (63) expr_simples -> . ID
    (64) expr_simples -> . NUM
    (65) expr_simples -> . FLOAT
    (66) expr_simples -> . STRING
    (67) expr_simples -> . TRUE
    (68) expr_simples -> . FALSE
    (69) expr_simples -> . ID DOT ID

    INPUT           shift and go to state 47
    OUTPUT          shift and go to state 48
    ID              shift and go to state 54
    LBRACKET        shift and go to state 55
    NUM             shift and go to state 56
    FLOAT           shift and go to state 57
    STRING          shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60

    expr                           shift and go to state 108
    chamada_funcao                 shift and go to state 49
    expr_binop                     shift and go to state 50
    expr_comparacao                shift and go to state 51
    expr_lista                     shift and go to state 52
    expr_simples                   shift and go to state 53

state 79

    (54) expr_comparacao -> expr LT . expr
    (40) expr -> . INPUT LPAREN args RPAREN
    (41) expr -> . OUTPUT LPAREN args RPAREN
    (45) expr -> . chamada_funcao
    (46) expr -> . expr_binop
    (47) expr -> . expr_comparacao
    (48) expr -> . expr_lista
    (49) expr -> . expr_simples
    (42) chamada_funcao -> . ID LPAREN args RPAREN
    (50) expr_binop -> . expr PLUS expr
    (51) expr_binop -> . expr MINUS expr
    (52) expr_binop -> . expr MULT expr
    (53) expr_binop -> . expr DIV expr
    (54) expr_comparacao -> . expr LT expr
    (55) expr_comparacao -> . expr LE expr
    (56) expr_comparacao -> . expr GT expr
    (57) expr_comparacao -> . expr GE expr
    (58) expr_comparacao -> . expr EQ expr
    (59) expr_comparacao -> . expr NE expr
    (60) expr_lista -> . LBRACKET expr_list RBRACKET
    (63) expr_simples -> . ID
    (64) expr_simples -> . NUM
    (65) expr_simples -> . FLOAT
    (66) expr_simples -> . STRING
    (67) expr_simples -> . TRUE
    (68) expr_simples -> . FALSE
    (69) expr_simples -> . ID DOT ID

    INPUT           shift and go to state 47
    OUTPUT          shift and go to state 48
    ID              shift and go to state 54
    LBRACKET        shift and go to state 55
    NUM             shift and go to state 56
    FLOAT           shift and go to state 57
    STRING          shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60

    expr                           shift and go to state 109
    chamada_funcao                 shift and go to state 49
    expr_binop                     shift and go to state 50
    expr_comparacao                shift and go to state 51
    expr_lista                     shift and go to state 52
    expr_simples                   shift and go to state 53

state 80

    (55) expr_comparacao -> expr LE . expr
    (40) expr -> . INPUT LPAREN args RPAREN
    (41) expr -> . OUTPUT LPAREN args RPAREN
    (45) expr -> . chamada_funcao
    (46) expr -> . expr_binop
    (47) expr -> . expr_comparacao
    (48) expr -> . expr_lista
    (49) expr -> . expr_simples
    (42) chamada_funcao -> . ID LPAREN args RPAREN
    (50) expr_binop -> . expr PLUS expr
    (51) expr_binop -> . expr MINUS expr
    (52) expr_binop -> . expr MULT expr
    (53) expr_binop -> . expr DIV expr
    (54) expr_comparacao -> . expr LT expr
    (55) expr_comparacao -> . expr LE expr
    (56) expr_comparacao -> . expr GT expr
    (57) expr_comparacao -> . expr GE expr
    (58) expr_comparacao -> . expr EQ expr
    (59) expr_comparacao -> . expr NE expr
    (60) expr_lista -> . LBRACKET expr_list RBRACKET
    (63) expr_simples -> . ID
    (64) expr_simples -> . NUM
    (65) expr_simples -> . FLOAT
    (66) expr_simples -> . STRING
    (67) expr_simples -> . TRUE
    (68) expr_simples -> . FALSE
    (69) expr_simples -> . ID DOT ID

    INPUT           shift and go to state 47
    OUTPUT          shift and go to state 48
    ID              shift and go to state 54
    LBRACKET        shift and go to state 55
    NUM             shift and go to state 56
    FLOAT           shift and go to state 57
    STRING          shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60

    expr                           shift and go to state 110
    chamada_funcao                 shift and go to state 49
    expr_binop                     shift and go to state 50
    expr_comparacao                shift and go to state 51
    expr_lista                     shift and go to state 52
    expr_simples                   shift and go to state 53

state 81

    (56) expr_comparacao -> expr GT . expr
    (40) expr -> . INPUT LPAREN args RPAREN
    (41) expr -> . OUTPUT LPAREN args RPAREN
    (45) expr -> . chamada_funcao
    (46) expr -> . expr_binop
    (47) expr -> . expr_comparacao
    (48) expr -> . expr_lista
    (49) expr -> . expr_simples
    (42) chamada_funcao -> . ID LPAREN args RPAREN
    (50) expr_binop -> . expr PLUS expr
    (51) expr_binop -> . expr MINUS expr
    (52) expr_binop -> . expr MULT expr
    (53) expr_binop -> . expr DIV expr
    (54) expr_comparacao -> . expr LT expr
    (55) expr_comparacao -> . expr LE expr
    (56) expr_comparacao -> . expr GT expr
    (57) expr_comparacao -> . expr GE expr
    (58) expr_comparacao -> . expr EQ expr
    (59) expr_comparacao -> . expr NE expr
    (60) expr_lista -> . LBRACKET expr_list RBRACKET
    (63) expr_simples -> . ID
    (64) expr_simples -> . NUM
    (65) expr_simples -> . FLOAT
    (66) expr_simples -> . STRING
    (67) expr_simples -> . TRUE
    (68) expr_simples -> . FALSE
    (69) expr_simples -> . ID DOT ID

    INPUT           shift and go to state 47
    OUTPUT          shift and go to state 48
    ID              shift and go to state 54
    LBRACKET        shift and go to state 55
    NUM             shift and go to state 56
    FLOAT           shift and go to state 57
    STRING          shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60

    expr                           shift and go to state 111
    chamada_funcao                 shift and go to state 49
    expr_binop                     shift and go to state 50
    expr_comparacao                shift and go to state 51
    expr_lista                     shift and go to state 52
    expr_simples                   shift and go to state 53

state 82

    (57) expr_comparacao -> expr GE . expr
    (40) expr -> . INPUT LPAREN args RPAREN
    (41) expr -> . OUTPUT LPAREN args RPAREN
    (45) expr -> . chamada_funcao
    (46) expr -> . expr_binop
    (47) expr -> . expr_comparacao
    (48) expr -> . expr_lista
    (49) expr -> . expr_simples
    (42) chamada_funcao -> . ID LPAREN args RPAREN
    (50) expr_binop -> . expr PLUS expr
    (51) expr_binop -> . expr MINUS expr
    (52) expr_binop -> . expr MULT expr
    (53) expr_binop -> . expr DIV expr
    (54) expr_comparacao -> . expr LT expr
    (55) expr_comparacao -> . expr LE expr
    (56) expr_comparacao -> . expr GT expr
    (57) expr_comparacao -> . expr GE expr
    (58) expr_comparacao -> . expr EQ expr
    (59) expr_comparacao -> . expr NE expr
    (60) expr_lista -> . LBRACKET expr_list RBRACKET
    (63) expr_simples -> . ID
    (64) expr_simples -> . NUM
    (65) expr_simples -> . FLOAT
    (66) expr_simples -> . STRING
    (67) expr_simples -> . TRUE
    (68) expr_simples -> . FALSE
    (69) expr_simples -> . ID DOT ID

    INPUT           shift and go to state 47
    OUTPUT          shift and go to state 48
    ID              shift and go to state 54
    LBRACKET        shift and go to state 55
    NUM             shift and go to state 56
    FLOAT           shift and go to state 57
    STRING          shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60

    expr                           shift and go to state 112
    chamada_funcao                 shift and go to state 49
    expr_binop                     shift and go to state 50
    expr_comparacao                shift and go to state 51
    expr_lista                     shift and go to state 52
    expr_simples                   shift and go to state 53

state 83

    (58) expr_comparacao -> expr EQ . expr
    (40) expr -> . INPUT LPAREN args RPAREN
    (41) expr -> . OUTPUT LPAREN args RPAREN
    (45) expr -> . chamada_funcao
    (46) expr -> . expr_binop
    (47) expr -> . expr_comparacao
    (48) expr -> . expr_lista
    (49) expr -> . expr_simples
    (42) chamada_funcao -> . ID LPAREN args RPAREN
    (50) expr_binop -> . expr PLUS expr
    (51) expr_binop -> . expr MINUS expr
    (52) expr_binop -> . expr MULT expr
    (53) expr_binop -> . expr DIV expr
    (54) expr_comparacao -> . expr LT expr
    (55) expr_comparacao -> . expr LE expr
    (56) expr_comparacao -> . expr GT expr
    (57) expr_comparacao -> . expr GE expr
    (58) expr_comparacao -> . expr EQ expr
    (59) expr_comparacao -> . expr NE expr
    (60) expr_lista -> . LBRACKET expr_list RBRACKET
    (63) expr_simples -> . ID
    (64) expr_simples -> . NUM
    (65) expr_simples -> . FLOAT
    (66) expr_simples -> . STRING
    (67) expr_simples -> . TRUE
    (68) expr_simples -> . FALSE
    (69) expr_simples -> . ID DOT ID

    INPUT           shift and go to state 47
    OUTPUT          shift and go to state 48
    ID              shift and go to state 54
    LBRACKET        shift and go to state 55
    NUM             shift and go to state 56
    FLOAT           shift and go to state 57
    STRING          shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60

    expr                           shift and go to state 113
    chamada_funcao                 shift and go to state 49
    expr_binop                     shift and go to state 50
    expr_comparacao                shift and go to state 51
    expr_lista                     shift and go to state 52
    expr_simples                   shift and go to state 53

state 84

    (59) expr_comparacao -> expr NE . expr
    (40) expr -> . INPUT LPAREN args RPAREN
    (41) expr -> . OUTPUT LPAREN args RPAREN
    (45) expr -> . chamada_funcao
    (46) expr -> . expr_binop
    (47) expr -> . expr_comparacao
    (48) expr -> . expr_lista
    (49) expr -> . expr_simples
    (42) chamada_funcao -> . ID LPAREN args RPAREN
    (50) expr_binop -> . expr PLUS expr
    (51) expr_binop -> . expr MINUS expr
    (52) expr_binop -> . expr MULT expr
    (53) expr_binop -> . expr DIV expr
    (54) expr_comparacao -> . expr LT expr
    (55) expr_comparacao -> . expr LE expr
    (56) expr_comparacao -> . expr GT expr
    (57) expr_comparacao -> . expr GE expr
    (58) expr_comparacao -> . expr EQ expr
    (59) expr_comparacao -> . expr NE expr
    (60) expr_lista -> . LBRACKET expr_list RBRACKET
    (63) expr_simples -> . ID
    (64) expr_simples -> . NUM
    (65) expr_simples -> . FLOAT
    (66) expr_simples -> . STRING
    (67) expr_simples -> . TRUE
    (68) expr_simples -> . FALSE
    (69) expr_simples -> . ID DOT ID

    INPUT           shift and go to state 47
    OUTPUT          shift and go to state 48
    ID              shift and go to state 54
    LBRACKET        shift and go to state 55
    NUM             shift and go to state 56
    FLOAT           shift and go to state 57
    STRING          shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60

    expr                           shift and go to state 114
    chamada_funcao                 shift and go to state 49
    expr_binop                     shift and go to state 50
    expr_comparacao                shift and go to state 51
    expr_lista                     shift and go to state 52
    expr_simples                   shift and go to state 53

state 85

    (40) expr -> INPUT LPAREN . args RPAREN
    (43) args -> . expr_list
    (44) args -> .
    (61) expr_list -> . expr
    (62) expr_list -> . expr COMMA expr_list
    (40) expr -> . INPUT LPAREN args RPAREN
    (41) expr -> . OUTPUT LPAREN args RPAREN
    (45) expr -> . chamada_funcao
    (46) expr -> . expr_binop
    (47) expr -> . expr_comparacao
    (48) expr -> . expr_lista
    (49) expr -> . expr_simples
    (42) chamada_funcao -> . ID LPAREN args RPAREN
    (50) expr_binop -> . expr PLUS expr
    (51) expr_binop -> . expr MINUS expr
    (52) expr_binop -> . expr MULT expr
    (53) expr_binop -> . expr DIV expr
    (54) expr_comparacao -> . expr LT expr
    (55) expr_comparacao -> . expr LE expr
    (56) expr_comparacao -> . expr GT expr
    (57) expr_comparacao -> . expr GE expr
    (58) expr_comparacao -> . expr EQ expr
    (59) expr_comparacao -> . expr NE expr
    (60) expr_lista -> . LBRACKET expr_list RBRACKET
    (63) expr_simples -> . ID
    (64) expr_simples -> . NUM
    (65) expr_simples -> . FLOAT
    (66) expr_simples -> . STRING
    (67) expr_simples -> . TRUE
    (68) expr_simples -> . FALSE
    (69) expr_simples -> . ID DOT ID

    RPAREN          reduce using rule 44 (args -> .)
    INPUT           shift and go to state 47
    OUTPUT          shift and go to state 48
    ID              shift and go to state 54
    LBRACKET        shift and go to state 55
    NUM             shift and go to state 56
    FLOAT           shift and go to state 57
    STRING          shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60

    args                           shift and go to state 115
    expr_list                      shift and go to state 93
    expr                           shift and go to state 89
    chamada_funcao                 shift and go to state 49
    expr_binop                     shift and go to state 50
    expr_comparacao                shift and go to state 51
    expr_lista                     shift and go to state 52
    expr_simples                   shift and go to state 53

state 86

    (41) expr -> OUTPUT LPAREN . args RPAREN
    (43) args -> . expr_list
    (44) args -> .
    (61) expr_list -> . expr
    (62) expr_list -> . expr COMMA expr_list
    (40) expr -> . INPUT LPAREN args RPAREN
    (41) expr -> . OUTPUT LPAREN args RPAREN
    (45) expr -> . chamada_funcao
    (46) expr -> . expr_binop
    (47) expr -> . expr_comparacao
    (48) expr -> . expr_lista
    (49) expr -> . expr_simples
    (42) chamada_funcao -> . ID LPAREN args RPAREN
    (50) expr_binop -> . expr PLUS expr
    (51) expr_binop -> . expr MINUS expr
    (52) expr_binop -> . expr MULT expr
    (53) expr_binop -> . expr DIV expr
    (54) expr_comparacao -> . expr LT expr
    (55) expr_comparacao -> . expr LE expr
    (56) expr_comparacao -> . expr GT expr
    (57) expr_comparacao -> . expr GE expr
    (58) expr_comparacao -> . expr EQ expr
    (59) expr_comparacao -> . expr NE expr
    (60) expr_lista -> . LBRACKET expr_list RBRACKET
    (63) expr_simples -> . ID
    (64) expr_simples -> . NUM
    (65) expr_simples -> . FLOAT
    (66) expr_simples -> . STRING
    (67) expr_simples -> . TRUE
    (68) expr_simples -> . FALSE
    (69) expr_simples -> . ID DOT ID

    RPAREN          reduce using rule 44 (args -> .)
    INPUT           shift and go to state 47
    OUTPUT          shift and go to state 48
    ID              shift and go to state 54
    LBRACKET        shift and go to state 55
    NUM             shift and go to state 56
    FLOAT           shift and go to state 57
    STRING          shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60

    args                           shift and go to state 116
    expr_list                      shift and go to state 93
    expr                           shift and go to state 89
    chamada_funcao                 shift and go to state 49
    expr_binop                     shift and go to state 50
    expr_comparacao                shift and go to state 51
    expr_lista                     shift and go to state 52
    expr_simples                   shift and go to state 53

state 87

    (69) expr_simples -> ID DOT . ID

    ID              shift and go to state 117


state 88

    (60) expr_lista -> LBRACKET expr_list . RBRACKET

    RBRACKET        shift and go to state 118


state 89

    (61) expr_list -> expr .
    (62) expr_list -> expr . COMMA expr_list
    (50) expr_binop -> expr . PLUS expr
    (51) expr_binop -> expr . MINUS expr
    (52) expr_binop -> expr . MULT expr
    (53) expr_binop -> expr . DIV expr
    (54) expr_comparacao -> expr . LT expr
    (55) expr_comparacao -> expr . LE expr
    (56) expr_comparacao -> expr . GT expr
    (57) expr_comparacao -> expr . GE expr
    (58) expr_comparacao -> expr . EQ expr
    (59) expr_comparacao -> expr . NE expr

    RBRACKET        reduce using rule 61 (expr_list -> expr .)
    RPAREN          reduce using rule 61 (expr_list -> expr .)
    COMMA           shift and go to state 119
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    MULT            shift and go to state 77
    DIV             shift and go to state 78
    LT              shift and go to state 79
    LE              shift and go to state 80
    GT              shift and go to state 81
    GE              shift and go to state 82
    EQ              shift and go to state 83
    NE              shift and go to state 84


state 90

    (14) declaracao -> tipo_var ID ASSIGN . expr
    (40) expr -> . INPUT LPAREN args RPAREN
    (41) expr -> . OUTPUT LPAREN args RPAREN
    (45) expr -> . chamada_funcao
    (46) expr -> . expr_binop
    (47) expr -> . expr_comparacao
    (48) expr -> . expr_lista
    (49) expr -> . expr_simples
    (42) chamada_funcao -> . ID LPAREN args RPAREN
    (50) expr_binop -> . expr PLUS expr
    (51) expr_binop -> . expr MINUS expr
    (52) expr_binop -> . expr MULT expr
    (53) expr_binop -> . expr DIV expr
    (54) expr_comparacao -> . expr LT expr
    (55) expr_comparacao -> . expr LE expr
    (56) expr_comparacao -> . expr GT expr
    (57) expr_comparacao -> . expr GE expr
    (58) expr_comparacao -> . expr EQ expr
    (59) expr_comparacao -> . expr NE expr
    (60) expr_lista -> . LBRACKET expr_list RBRACKET
    (63) expr_simples -> . ID
    (64) expr_simples -> . NUM
    (65) expr_simples -> . FLOAT
    (66) expr_simples -> . STRING
    (67) expr_simples -> . TRUE
    (68) expr_simples -> . FALSE
    (69) expr_simples -> . ID DOT ID

    INPUT           shift and go to state 47
    OUTPUT          shift and go to state 48
    ID              shift and go to state 54
    LBRACKET        shift and go to state 55
    NUM             shift and go to state 56
    FLOAT           shift and go to state 57
    STRING          shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60

    expr                           shift and go to state 120
    chamada_funcao                 shift and go to state 49
    expr_binop                     shift and go to state 50
    expr_comparacao                shift and go to state 51
    expr_lista                     shift and go to state 52
    expr_simples                   shift and go to state 53

state 91

    (16) atribuicao -> ID ASSIGN expr .
    (50) expr_binop -> expr . PLUS expr
    (51) expr_binop -> expr . MINUS expr
    (52) expr_binop -> expr . MULT expr
    (53) expr_binop -> expr . DIV expr
    (54) expr_comparacao -> expr . LT expr
    (55) expr_comparacao -> expr . LE expr
    (56) expr_comparacao -> expr . GT expr
    (57) expr_comparacao -> expr . GE expr
    (58) expr_comparacao -> expr . EQ expr
    (59) expr_comparacao -> expr . NE expr

    SEMICOLON       reduce using rule 16 (atribuicao -> ID ASSIGN expr .)
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    MULT            shift and go to state 77
    DIV             shift and go to state 78
    LT              shift and go to state 79
    LE              shift and go to state 80
    GT              shift and go to state 81
    GE              shift and go to state 82
    EQ              shift and go to state 83
    NE              shift and go to state 84


state 92

    (42) chamada_funcao -> ID LPAREN args . RPAREN

    RPAREN          shift and go to state 121


state 93

    (43) args -> expr_list .

    RPAREN          reduce using rule 43 (args -> expr_list .)


state 94

    (34) receive_stmt -> ID DOT RECEIVE . COLON expr SEMICOLON

    COLON           shift and go to state 122


state 95

    (35) send_stmt -> ID DOT SEND . COLON expr SEMICOLON

    COLON           shift and go to state 123


state 96

    (15) declaracao -> C_CHANNEL ASSIGN ID . STRING NUM SEMICOLON

    STRING          shift and go to state 124


state 97

    (70) if_stmt -> IF LPAREN expr . RPAREN LBRACE stmts RBRACE
    (71) if_stmt -> IF LPAREN expr . RPAREN LBRACE stmts RBRACE ELSE LBRACE stmts RBRACE
    (50) expr_binop -> expr . PLUS expr
    (51) expr_binop -> expr . MINUS expr
    (52) expr_binop -> expr . MULT expr
    (53) expr_binop -> expr . DIV expr
    (54) expr_comparacao -> expr . LT expr
    (55) expr_comparacao -> expr . LE expr
    (56) expr_comparacao -> expr . GT expr
    (57) expr_comparacao -> expr . GE expr
    (58) expr_comparacao -> expr . EQ expr
    (59) expr_comparacao -> expr . NE expr

    RPAREN          shift and go to state 125
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    MULT            shift and go to state 77
    DIV             shift and go to state 78
    LT              shift and go to state 79
    LE              shift and go to state 80
    GT              shift and go to state 81
    GE              shift and go to state 82
    EQ              shift and go to state 83
    NE              shift and go to state 84


state 98

    (30) for_stmt -> FOR LPAREN ID . IN expr RPAREN LBRACE stmts RBRACE

    IN              shift and go to state 126


state 99

    (31) while_stmt -> WHILE LPAREN expr . RPAREN LBRACE stmts RBRACE
    (50) expr_binop -> expr . PLUS expr
    (51) expr_binop -> expr . MINUS expr
    (52) expr_binop -> expr . MULT expr
    (53) expr_binop -> expr . DIV expr
    (54) expr_comparacao -> expr . LT expr
    (55) expr_comparacao -> expr . LE expr
    (56) expr_comparacao -> expr . GT expr
    (57) expr_comparacao -> expr . GE expr
    (58) expr_comparacao -> expr . EQ expr
    (59) expr_comparacao -> expr . NE expr

    RPAREN          shift and go to state 127
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    MULT            shift and go to state 77
    DIV             shift and go to state 78
    LT              shift and go to state 79
    LE              shift and go to state 80
    GT              shift and go to state 81
    GE              shift and go to state 82
    EQ              shift and go to state 83
    NE              shift and go to state 84


state 100

    (39) def_funcao -> DEF ID LPAREN . params RPAREN LBRACE stmts RBRACE
    (36) params -> . ID COMMA params
    (37) params -> . ID
    (38) params -> .

    ID              shift and go to state 128
    RPAREN          reduce using rule 38 (params -> .)

    params                         shift and go to state 129

state 101

    (32) input -> INPUT LPAREN args . RPAREN

    RPAREN          shift and go to state 130


state 102

    (33) output -> OUTPUT LPAREN args . RPAREN

    RPAREN          shift and go to state 131


state 103

    (13) tipo_var -> LIST LT tipo_var . GT

    GT              shift and go to state 132


state 104

    (12) tipo_var -> C_CHANNEL .

    GT              reduce using rule 12 (tipo_var -> C_CHANNEL .)


state 105

    (50) expr_binop -> expr PLUS expr .
    (50) expr_binop -> expr . PLUS expr
    (51) expr_binop -> expr . MINUS expr
    (52) expr_binop -> expr . MULT expr
    (53) expr_binop -> expr . DIV expr
    (54) expr_comparacao -> expr . LT expr
    (55) expr_comparacao -> expr . LE expr
    (56) expr_comparacao -> expr . GT expr
    (57) expr_comparacao -> expr . GE expr
    (58) expr_comparacao -> expr . EQ expr
    (59) expr_comparacao -> expr . NE expr

    SEMICOLON       reduce using rule 50 (expr_binop -> expr PLUS expr .)
    PLUS            reduce using rule 50 (expr_binop -> expr PLUS expr .)
    MINUS           reduce using rule 50 (expr_binop -> expr PLUS expr .)
    COMMA           reduce using rule 50 (expr_binop -> expr PLUS expr .)
    RBRACKET        reduce using rule 50 (expr_binop -> expr PLUS expr .)
    RPAREN          reduce using rule 50 (expr_binop -> expr PLUS expr .)
    MULT            shift and go to state 77
    DIV             shift and go to state 78
    LT              shift and go to state 79
    LE              shift and go to state 80
    GT              shift and go to state 81
    GE              shift and go to state 82
    EQ              shift and go to state 83
    NE              shift and go to state 84

  ! MULT            [ reduce using rule 50 (expr_binop -> expr PLUS expr .) ]
  ! DIV             [ reduce using rule 50 (expr_binop -> expr PLUS expr .) ]
  ! LT              [ reduce using rule 50 (expr_binop -> expr PLUS expr .) ]
  ! LE              [ reduce using rule 50 (expr_binop -> expr PLUS expr .) ]
  ! GT              [ reduce using rule 50 (expr_binop -> expr PLUS expr .) ]
  ! GE              [ reduce using rule 50 (expr_binop -> expr PLUS expr .) ]
  ! EQ              [ reduce using rule 50 (expr_binop -> expr PLUS expr .) ]
  ! NE              [ reduce using rule 50 (expr_binop -> expr PLUS expr .) ]
  ! PLUS            [ shift and go to state 75 ]
  ! MINUS           [ shift and go to state 76 ]


state 106

    (51) expr_binop -> expr MINUS expr .
    (50) expr_binop -> expr . PLUS expr
    (51) expr_binop -> expr . MINUS expr
    (52) expr_binop -> expr . MULT expr
    (53) expr_binop -> expr . DIV expr
    (54) expr_comparacao -> expr . LT expr
    (55) expr_comparacao -> expr . LE expr
    (56) expr_comparacao -> expr . GT expr
    (57) expr_comparacao -> expr . GE expr
    (58) expr_comparacao -> expr . EQ expr
    (59) expr_comparacao -> expr . NE expr

    SEMICOLON       reduce using rule 51 (expr_binop -> expr MINUS expr .)
    PLUS            reduce using rule 51 (expr_binop -> expr MINUS expr .)
    MINUS           reduce using rule 51 (expr_binop -> expr MINUS expr .)
    COMMA           reduce using rule 51 (expr_binop -> expr MINUS expr .)
    RBRACKET        reduce using rule 51 (expr_binop -> expr MINUS expr .)
    RPAREN          reduce using rule 51 (expr_binop -> expr MINUS expr .)
    MULT            shift and go to state 77
    DIV             shift and go to state 78
    LT              shift and go to state 79
    LE              shift and go to state 80
    GT              shift and go to state 81
    GE              shift and go to state 82
    EQ              shift and go to state 83
    NE              shift and go to state 84

  ! MULT            [ reduce using rule 51 (expr_binop -> expr MINUS expr .) ]
  ! DIV             [ reduce using rule 51 (expr_binop -> expr MINUS expr .) ]
  ! LT              [ reduce using rule 51 (expr_binop -> expr MINUS expr .) ]
  ! LE              [ reduce using rule 51 (expr_binop -> expr MINUS expr .) ]
  ! GT              [ reduce using rule 51 (expr_binop -> expr MINUS expr .) ]
  ! GE              [ reduce using rule 51 (expr_binop -> expr MINUS expr .) ]
  ! EQ              [ reduce using rule 51 (expr_binop -> expr MINUS expr .) ]
  ! NE              [ reduce using rule 51 (expr_binop -> expr MINUS expr .) ]
  ! PLUS            [ shift and go to state 75 ]
  ! MINUS           [ shift and go to state 76 ]


state 107

    (52) expr_binop -> expr MULT expr .
    (50) expr_binop -> expr . PLUS expr
    (51) expr_binop -> expr . MINUS expr
    (52) expr_binop -> expr . MULT expr
    (53) expr_binop -> expr . DIV expr
    (54) expr_comparacao -> expr . LT expr
    (55) expr_comparacao -> expr . LE expr
    (56) expr_comparacao -> expr . GT expr
    (57) expr_comparacao -> expr . GE expr
    (58) expr_comparacao -> expr . EQ expr
    (59) expr_comparacao -> expr . NE expr

    SEMICOLON       reduce using rule 52 (expr_binop -> expr MULT expr .)
    PLUS            reduce using rule 52 (expr_binop -> expr MULT expr .)
    MINUS           reduce using rule 52 (expr_binop -> expr MULT expr .)
    MULT            reduce using rule 52 (expr_binop -> expr MULT expr .)
    DIV             reduce using rule 52 (expr_binop -> expr MULT expr .)
    COMMA           reduce using rule 52 (expr_binop -> expr MULT expr .)
    RBRACKET        reduce using rule 52 (expr_binop -> expr MULT expr .)
    RPAREN          reduce using rule 52 (expr_binop -> expr MULT expr .)
    LT              shift and go to state 79
    LE              shift and go to state 80
    GT              shift and go to state 81
    GE              shift and go to state 82
    EQ              shift and go to state 83
    NE              shift and go to state 84

  ! LT              [ reduce using rule 52 (expr_binop -> expr MULT expr .) ]
  ! LE              [ reduce using rule 52 (expr_binop -> expr MULT expr .) ]
  ! GT              [ reduce using rule 52 (expr_binop -> expr MULT expr .) ]
  ! GE              [ reduce using rule 52 (expr_binop -> expr MULT expr .) ]
  ! EQ              [ reduce using rule 52 (expr_binop -> expr MULT expr .) ]
  ! NE              [ reduce using rule 52 (expr_binop -> expr MULT expr .) ]
  ! PLUS            [ shift and go to state 75 ]
  ! MINUS           [ shift and go to state 76 ]
  ! MULT            [ shift and go to state 77 ]
  ! DIV             [ shift and go to state 78 ]


state 108

    (53) expr_binop -> expr DIV expr .
    (50) expr_binop -> expr . PLUS expr
    (51) expr_binop -> expr . MINUS expr
    (52) expr_binop -> expr . MULT expr
    (53) expr_binop -> expr . DIV expr
    (54) expr_comparacao -> expr . LT expr
    (55) expr_comparacao -> expr . LE expr
    (56) expr_comparacao -> expr . GT expr
    (57) expr_comparacao -> expr . GE expr
    (58) expr_comparacao -> expr . EQ expr
    (59) expr_comparacao -> expr . NE expr

    SEMICOLON       reduce using rule 53 (expr_binop -> expr DIV expr .)
    PLUS            reduce using rule 53 (expr_binop -> expr DIV expr .)
    MINUS           reduce using rule 53 (expr_binop -> expr DIV expr .)
    MULT            reduce using rule 53 (expr_binop -> expr DIV expr .)
    DIV             reduce using rule 53 (expr_binop -> expr DIV expr .)
    COMMA           reduce using rule 53 (expr_binop -> expr DIV expr .)
    RBRACKET        reduce using rule 53 (expr_binop -> expr DIV expr .)
    RPAREN          reduce using rule 53 (expr_binop -> expr DIV expr .)
    LT              shift and go to state 79
    LE              shift and go to state 80
    GT              shift and go to state 81
    GE              shift and go to state 82
    EQ              shift and go to state 83
    NE              shift and go to state 84

  ! LT              [ reduce using rule 53 (expr_binop -> expr DIV expr .) ]
  ! LE              [ reduce using rule 53 (expr_binop -> expr DIV expr .) ]
  ! GT              [ reduce using rule 53 (expr_binop -> expr DIV expr .) ]
  ! GE              [ reduce using rule 53 (expr_binop -> expr DIV expr .) ]
  ! EQ              [ reduce using rule 53 (expr_binop -> expr DIV expr .) ]
  ! NE              [ reduce using rule 53 (expr_binop -> expr DIV expr .) ]
  ! PLUS            [ shift and go to state 75 ]
  ! MINUS           [ shift and go to state 76 ]
  ! MULT            [ shift and go to state 77 ]
  ! DIV             [ shift and go to state 78 ]


state 109

    (54) expr_comparacao -> expr LT expr .
    (50) expr_binop -> expr . PLUS expr
    (51) expr_binop -> expr . MINUS expr
    (52) expr_binop -> expr . MULT expr
    (53) expr_binop -> expr . DIV expr
    (54) expr_comparacao -> expr . LT expr
    (55) expr_comparacao -> expr . LE expr
    (56) expr_comparacao -> expr . GT expr
    (57) expr_comparacao -> expr . GE expr
    (58) expr_comparacao -> expr . EQ expr
    (59) expr_comparacao -> expr . NE expr

    SEMICOLON       reduce using rule 54 (expr_comparacao -> expr LT expr .)
    PLUS            reduce using rule 54 (expr_comparacao -> expr LT expr .)
    MINUS           reduce using rule 54 (expr_comparacao -> expr LT expr .)
    MULT            reduce using rule 54 (expr_comparacao -> expr LT expr .)
    DIV             reduce using rule 54 (expr_comparacao -> expr LT expr .)
    LT              reduce using rule 54 (expr_comparacao -> expr LT expr .)
    LE              reduce using rule 54 (expr_comparacao -> expr LT expr .)
    GT              reduce using rule 54 (expr_comparacao -> expr LT expr .)
    GE              reduce using rule 54 (expr_comparacao -> expr LT expr .)
    EQ              reduce using rule 54 (expr_comparacao -> expr LT expr .)
    NE              reduce using rule 54 (expr_comparacao -> expr LT expr .)
    COMMA           reduce using rule 54 (expr_comparacao -> expr LT expr .)
    RBRACKET        reduce using rule 54 (expr_comparacao -> expr LT expr .)
    RPAREN          reduce using rule 54 (expr_comparacao -> expr LT expr .)

  ! PLUS            [ shift and go to state 75 ]
  ! MINUS           [ shift and go to state 76 ]
  ! MULT            [ shift and go to state 77 ]
  ! DIV             [ shift and go to state 78 ]
  ! LT              [ shift and go to state 79 ]
  ! LE              [ shift and go to state 80 ]
  ! GT              [ shift and go to state 81 ]
  ! GE              [ shift and go to state 82 ]
  ! EQ              [ shift and go to state 83 ]
  ! NE              [ shift and go to state 84 ]


state 110

    (55) expr_comparacao -> expr LE expr .
    (50) expr_binop -> expr . PLUS expr
    (51) expr_binop -> expr . MINUS expr
    (52) expr_binop -> expr . MULT expr
    (53) expr_binop -> expr . DIV expr
    (54) expr_comparacao -> expr . LT expr
    (55) expr_comparacao -> expr . LE expr
    (56) expr_comparacao -> expr . GT expr
    (57) expr_comparacao -> expr . GE expr
    (58) expr_comparacao -> expr . EQ expr
    (59) expr_comparacao -> expr . NE expr

    SEMICOLON       reduce using rule 55 (expr_comparacao -> expr LE expr .)
    PLUS            reduce using rule 55 (expr_comparacao -> expr LE expr .)
    MINUS           reduce using rule 55 (expr_comparacao -> expr LE expr .)
    MULT            reduce using rule 55 (expr_comparacao -> expr LE expr .)
    DIV             reduce using rule 55 (expr_comparacao -> expr LE expr .)
    LT              reduce using rule 55 (expr_comparacao -> expr LE expr .)
    LE              reduce using rule 55 (expr_comparacao -> expr LE expr .)
    GT              reduce using rule 55 (expr_comparacao -> expr LE expr .)
    GE              reduce using rule 55 (expr_comparacao -> expr LE expr .)
    EQ              reduce using rule 55 (expr_comparacao -> expr LE expr .)
    NE              reduce using rule 55 (expr_comparacao -> expr LE expr .)
    COMMA           reduce using rule 55 (expr_comparacao -> expr LE expr .)
    RBRACKET        reduce using rule 55 (expr_comparacao -> expr LE expr .)
    RPAREN          reduce using rule 55 (expr_comparacao -> expr LE expr .)

  ! PLUS            [ shift and go to state 75 ]
  ! MINUS           [ shift and go to state 76 ]
  ! MULT            [ shift and go to state 77 ]
  ! DIV             [ shift and go to state 78 ]
  ! LT              [ shift and go to state 79 ]
  ! LE              [ shift and go to state 80 ]
  ! GT              [ shift and go to state 81 ]
  ! GE              [ shift and go to state 82 ]
  ! EQ              [ shift and go to state 83 ]
  ! NE              [ shift and go to state 84 ]


state 111

    (56) expr_comparacao -> expr GT expr .
    (50) expr_binop -> expr . PLUS expr
    (51) expr_binop -> expr . MINUS expr
    (52) expr_binop -> expr . MULT expr
    (53) expr_binop -> expr . DIV expr
    (54) expr_comparacao -> expr . LT expr
    (55) expr_comparacao -> expr . LE expr
    (56) expr_comparacao -> expr . GT expr
    (57) expr_comparacao -> expr . GE expr
    (58) expr_comparacao -> expr . EQ expr
    (59) expr_comparacao -> expr . NE expr

    SEMICOLON       reduce using rule 56 (expr_comparacao -> expr GT expr .)
    PLUS            reduce using rule 56 (expr_comparacao -> expr GT expr .)
    MINUS           reduce using rule 56 (expr_comparacao -> expr GT expr .)
    MULT            reduce using rule 56 (expr_comparacao -> expr GT expr .)
    DIV             reduce using rule 56 (expr_comparacao -> expr GT expr .)
    LT              reduce using rule 56 (expr_comparacao -> expr GT expr .)
    LE              reduce using rule 56 (expr_comparacao -> expr GT expr .)
    GT              reduce using rule 56 (expr_comparacao -> expr GT expr .)
    GE              reduce using rule 56 (expr_comparacao -> expr GT expr .)
    EQ              reduce using rule 56 (expr_comparacao -> expr GT expr .)
    NE              reduce using rule 56 (expr_comparacao -> expr GT expr .)
    COMMA           reduce using rule 56 (expr_comparacao -> expr GT expr .)
    RBRACKET        reduce using rule 56 (expr_comparacao -> expr GT expr .)
    RPAREN          reduce using rule 56 (expr_comparacao -> expr GT expr .)

  ! PLUS            [ shift and go to state 75 ]
  ! MINUS           [ shift and go to state 76 ]
  ! MULT            [ shift and go to state 77 ]
  ! DIV             [ shift and go to state 78 ]
  ! LT              [ shift and go to state 79 ]
  ! LE              [ shift and go to state 80 ]
  ! GT              [ shift and go to state 81 ]
  ! GE              [ shift and go to state 82 ]
  ! EQ              [ shift and go to state 83 ]
  ! NE              [ shift and go to state 84 ]


state 112

    (57) expr_comparacao -> expr GE expr .
    (50) expr_binop -> expr . PLUS expr
    (51) expr_binop -> expr . MINUS expr
    (52) expr_binop -> expr . MULT expr
    (53) expr_binop -> expr . DIV expr
    (54) expr_comparacao -> expr . LT expr
    (55) expr_comparacao -> expr . LE expr
    (56) expr_comparacao -> expr . GT expr
    (57) expr_comparacao -> expr . GE expr
    (58) expr_comparacao -> expr . EQ expr
    (59) expr_comparacao -> expr . NE expr

    SEMICOLON       reduce using rule 57 (expr_comparacao -> expr GE expr .)
    PLUS            reduce using rule 57 (expr_comparacao -> expr GE expr .)
    MINUS           reduce using rule 57 (expr_comparacao -> expr GE expr .)
    MULT            reduce using rule 57 (expr_comparacao -> expr GE expr .)
    DIV             reduce using rule 57 (expr_comparacao -> expr GE expr .)
    LT              reduce using rule 57 (expr_comparacao -> expr GE expr .)
    LE              reduce using rule 57 (expr_comparacao -> expr GE expr .)
    GT              reduce using rule 57 (expr_comparacao -> expr GE expr .)
    GE              reduce using rule 57 (expr_comparacao -> expr GE expr .)
    EQ              reduce using rule 57 (expr_comparacao -> expr GE expr .)
    NE              reduce using rule 57 (expr_comparacao -> expr GE expr .)
    COMMA           reduce using rule 57 (expr_comparacao -> expr GE expr .)
    RBRACKET        reduce using rule 57 (expr_comparacao -> expr GE expr .)
    RPAREN          reduce using rule 57 (expr_comparacao -> expr GE expr .)

  ! PLUS            [ shift and go to state 75 ]
  ! MINUS           [ shift and go to state 76 ]
  ! MULT            [ shift and go to state 77 ]
  ! DIV             [ shift and go to state 78 ]
  ! LT              [ shift and go to state 79 ]
  ! LE              [ shift and go to state 80 ]
  ! GT              [ shift and go to state 81 ]
  ! GE              [ shift and go to state 82 ]
  ! EQ              [ shift and go to state 83 ]
  ! NE              [ shift and go to state 84 ]


state 113

    (58) expr_comparacao -> expr EQ expr .
    (50) expr_binop -> expr . PLUS expr
    (51) expr_binop -> expr . MINUS expr
    (52) expr_binop -> expr . MULT expr
    (53) expr_binop -> expr . DIV expr
    (54) expr_comparacao -> expr . LT expr
    (55) expr_comparacao -> expr . LE expr
    (56) expr_comparacao -> expr . GT expr
    (57) expr_comparacao -> expr . GE expr
    (58) expr_comparacao -> expr . EQ expr
    (59) expr_comparacao -> expr . NE expr

    SEMICOLON       reduce using rule 58 (expr_comparacao -> expr EQ expr .)
    PLUS            reduce using rule 58 (expr_comparacao -> expr EQ expr .)
    MINUS           reduce using rule 58 (expr_comparacao -> expr EQ expr .)
    MULT            reduce using rule 58 (expr_comparacao -> expr EQ expr .)
    DIV             reduce using rule 58 (expr_comparacao -> expr EQ expr .)
    LT              reduce using rule 58 (expr_comparacao -> expr EQ expr .)
    LE              reduce using rule 58 (expr_comparacao -> expr EQ expr .)
    GT              reduce using rule 58 (expr_comparacao -> expr EQ expr .)
    GE              reduce using rule 58 (expr_comparacao -> expr EQ expr .)
    EQ              reduce using rule 58 (expr_comparacao -> expr EQ expr .)
    NE              reduce using rule 58 (expr_comparacao -> expr EQ expr .)
    COMMA           reduce using rule 58 (expr_comparacao -> expr EQ expr .)
    RBRACKET        reduce using rule 58 (expr_comparacao -> expr EQ expr .)
    RPAREN          reduce using rule 58 (expr_comparacao -> expr EQ expr .)

  ! PLUS            [ shift and go to state 75 ]
  ! MINUS           [ shift and go to state 76 ]
  ! MULT            [ shift and go to state 77 ]
  ! DIV             [ shift and go to state 78 ]
  ! LT              [ shift and go to state 79 ]
  ! LE              [ shift and go to state 80 ]
  ! GT              [ shift and go to state 81 ]
  ! GE              [ shift and go to state 82 ]
  ! EQ              [ shift and go to state 83 ]
  ! NE              [ shift and go to state 84 ]


state 114

    (59) expr_comparacao -> expr NE expr .
    (50) expr_binop -> expr . PLUS expr
    (51) expr_binop -> expr . MINUS expr
    (52) expr_binop -> expr . MULT expr
    (53) expr_binop -> expr . DIV expr
    (54) expr_comparacao -> expr . LT expr
    (55) expr_comparacao -> expr . LE expr
    (56) expr_comparacao -> expr . GT expr
    (57) expr_comparacao -> expr . GE expr
    (58) expr_comparacao -> expr . EQ expr
    (59) expr_comparacao -> expr . NE expr

    SEMICOLON       reduce using rule 59 (expr_comparacao -> expr NE expr .)
    PLUS            reduce using rule 59 (expr_comparacao -> expr NE expr .)
    MINUS           reduce using rule 59 (expr_comparacao -> expr NE expr .)
    MULT            reduce using rule 59 (expr_comparacao -> expr NE expr .)
    DIV             reduce using rule 59 (expr_comparacao -> expr NE expr .)
    LT              reduce using rule 59 (expr_comparacao -> expr NE expr .)
    LE              reduce using rule 59 (expr_comparacao -> expr NE expr .)
    GT              reduce using rule 59 (expr_comparacao -> expr NE expr .)
    GE              reduce using rule 59 (expr_comparacao -> expr NE expr .)
    EQ              reduce using rule 59 (expr_comparacao -> expr NE expr .)
    NE              reduce using rule 59 (expr_comparacao -> expr NE expr .)
    COMMA           reduce using rule 59 (expr_comparacao -> expr NE expr .)
    RBRACKET        reduce using rule 59 (expr_comparacao -> expr NE expr .)
    RPAREN          reduce using rule 59 (expr_comparacao -> expr NE expr .)

  ! PLUS            [ shift and go to state 75 ]
  ! MINUS           [ shift and go to state 76 ]
  ! MULT            [ shift and go to state 77 ]
  ! DIV             [ shift and go to state 78 ]
  ! LT              [ shift and go to state 79 ]
  ! LE              [ shift and go to state 80 ]
  ! GT              [ shift and go to state 81 ]
  ! GE              [ shift and go to state 82 ]
  ! EQ              [ shift and go to state 83 ]
  ! NE              [ shift and go to state 84 ]


state 115

    (40) expr -> INPUT LPAREN args . RPAREN

    RPAREN          shift and go to state 133


state 116

    (41) expr -> OUTPUT LPAREN args . RPAREN

    RPAREN          shift and go to state 134


state 117

    (69) expr_simples -> ID DOT ID .

    SEMICOLON       reduce using rule 69 (expr_simples -> ID DOT ID .)
    PLUS            reduce using rule 69 (expr_simples -> ID DOT ID .)
    MINUS           reduce using rule 69 (expr_simples -> ID DOT ID .)
    MULT            reduce using rule 69 (expr_simples -> ID DOT ID .)
    DIV             reduce using rule 69 (expr_simples -> ID DOT ID .)
    LT              reduce using rule 69 (expr_simples -> ID DOT ID .)
    LE              reduce using rule 69 (expr_simples -> ID DOT ID .)
    GT              reduce using rule 69 (expr_simples -> ID DOT ID .)
    GE              reduce using rule 69 (expr_simples -> ID DOT ID .)
    EQ              reduce using rule 69 (expr_simples -> ID DOT ID .)
    NE              reduce using rule 69 (expr_simples -> ID DOT ID .)
    COMMA           reduce using rule 69 (expr_simples -> ID DOT ID .)
    RBRACKET        reduce using rule 69 (expr_simples -> ID DOT ID .)
    RPAREN          reduce using rule 69 (expr_simples -> ID DOT ID .)


state 118

    (60) expr_lista -> LBRACKET expr_list RBRACKET .

    SEMICOLON       reduce using rule 60 (expr_lista -> LBRACKET expr_list RBRACKET .)
    PLUS            reduce using rule 60 (expr_lista -> LBRACKET expr_list RBRACKET .)
    MINUS           reduce using rule 60 (expr_lista -> LBRACKET expr_list RBRACKET .)
    MULT            reduce using rule 60 (expr_lista -> LBRACKET expr_list RBRACKET .)
    DIV             reduce using rule 60 (expr_lista -> LBRACKET expr_list RBRACKET .)
    LT              reduce using rule 60 (expr_lista -> LBRACKET expr_list RBRACKET .)
    LE              reduce using rule 60 (expr_lista -> LBRACKET expr_list RBRACKET .)
    GT              reduce using rule 60 (expr_lista -> LBRACKET expr_list RBRACKET .)
    GE              reduce using rule 60 (expr_lista -> LBRACKET expr_list RBRACKET .)
    EQ              reduce using rule 60 (expr_lista -> LBRACKET expr_list RBRACKET .)
    NE              reduce using rule 60 (expr_lista -> LBRACKET expr_list RBRACKET .)
    COMMA           reduce using rule 60 (expr_lista -> LBRACKET expr_list RBRACKET .)
    RBRACKET        reduce using rule 60 (expr_lista -> LBRACKET expr_list RBRACKET .)
    RPAREN          reduce using rule 60 (expr_lista -> LBRACKET expr_list RBRACKET .)


state 119

    (62) expr_list -> expr COMMA . expr_list
    (61) expr_list -> . expr
    (62) expr_list -> . expr COMMA expr_list
    (40) expr -> . INPUT LPAREN args RPAREN
    (41) expr -> . OUTPUT LPAREN args RPAREN
    (45) expr -> . chamada_funcao
    (46) expr -> . expr_binop
    (47) expr -> . expr_comparacao
    (48) expr -> . expr_lista
    (49) expr -> . expr_simples
    (42) chamada_funcao -> . ID LPAREN args RPAREN
    (50) expr_binop -> . expr PLUS expr
    (51) expr_binop -> . expr MINUS expr
    (52) expr_binop -> . expr MULT expr
    (53) expr_binop -> . expr DIV expr
    (54) expr_comparacao -> . expr LT expr
    (55) expr_comparacao -> . expr LE expr
    (56) expr_comparacao -> . expr GT expr
    (57) expr_comparacao -> . expr GE expr
    (58) expr_comparacao -> . expr EQ expr
    (59) expr_comparacao -> . expr NE expr
    (60) expr_lista -> . LBRACKET expr_list RBRACKET
    (63) expr_simples -> . ID
    (64) expr_simples -> . NUM
    (65) expr_simples -> . FLOAT
    (66) expr_simples -> . STRING
    (67) expr_simples -> . TRUE
    (68) expr_simples -> . FALSE
    (69) expr_simples -> . ID DOT ID

    INPUT           shift and go to state 47
    OUTPUT          shift and go to state 48
    ID              shift and go to state 54
    LBRACKET        shift and go to state 55
    NUM             shift and go to state 56
    FLOAT           shift and go to state 57
    STRING          shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60

    expr                           shift and go to state 89
    expr_list                      shift and go to state 135
    chamada_funcao                 shift and go to state 49
    expr_binop                     shift and go to state 50
    expr_comparacao                shift and go to state 51
    expr_lista                     shift and go to state 52
    expr_simples                   shift and go to state 53

state 120

    (14) declaracao -> tipo_var ID ASSIGN expr .
    (50) expr_binop -> expr . PLUS expr
    (51) expr_binop -> expr . MINUS expr
    (52) expr_binop -> expr . MULT expr
    (53) expr_binop -> expr . DIV expr
    (54) expr_comparacao -> expr . LT expr
    (55) expr_comparacao -> expr . LE expr
    (56) expr_comparacao -> expr . GT expr
    (57) expr_comparacao -> expr . GE expr
    (58) expr_comparacao -> expr . EQ expr
    (59) expr_comparacao -> expr . NE expr

    SEMICOLON       reduce using rule 14 (declaracao -> tipo_var ID ASSIGN expr .)
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    MULT            shift and go to state 77
    DIV             shift and go to state 78
    LT              shift and go to state 79
    LE              shift and go to state 80
    GT              shift and go to state 81
    GE              shift and go to state 82
    EQ              shift and go to state 83
    NE              shift and go to state 84


state 121

    (42) chamada_funcao -> ID LPAREN args RPAREN .

    SEMICOLON       reduce using rule 42 (chamada_funcao -> ID LPAREN args RPAREN .)
    PLUS            reduce using rule 42 (chamada_funcao -> ID LPAREN args RPAREN .)
    MINUS           reduce using rule 42 (chamada_funcao -> ID LPAREN args RPAREN .)
    MULT            reduce using rule 42 (chamada_funcao -> ID LPAREN args RPAREN .)
    DIV             reduce using rule 42 (chamada_funcao -> ID LPAREN args RPAREN .)
    LT              reduce using rule 42 (chamada_funcao -> ID LPAREN args RPAREN .)
    LE              reduce using rule 42 (chamada_funcao -> ID LPAREN args RPAREN .)
    GT              reduce using rule 42 (chamada_funcao -> ID LPAREN args RPAREN .)
    GE              reduce using rule 42 (chamada_funcao -> ID LPAREN args RPAREN .)
    EQ              reduce using rule 42 (chamada_funcao -> ID LPAREN args RPAREN .)
    NE              reduce using rule 42 (chamada_funcao -> ID LPAREN args RPAREN .)
    COMMA           reduce using rule 42 (chamada_funcao -> ID LPAREN args RPAREN .)
    RBRACKET        reduce using rule 42 (chamada_funcao -> ID LPAREN args RPAREN .)
    RPAREN          reduce using rule 42 (chamada_funcao -> ID LPAREN args RPAREN .)


state 122

    (34) receive_stmt -> ID DOT RECEIVE COLON . expr SEMICOLON
    (40) expr -> . INPUT LPAREN args RPAREN
    (41) expr -> . OUTPUT LPAREN args RPAREN
    (45) expr -> . chamada_funcao
    (46) expr -> . expr_binop
    (47) expr -> . expr_comparacao
    (48) expr -> . expr_lista
    (49) expr -> . expr_simples
    (42) chamada_funcao -> . ID LPAREN args RPAREN
    (50) expr_binop -> . expr PLUS expr
    (51) expr_binop -> . expr MINUS expr
    (52) expr_binop -> . expr MULT expr
    (53) expr_binop -> . expr DIV expr
    (54) expr_comparacao -> . expr LT expr
    (55) expr_comparacao -> . expr LE expr
    (56) expr_comparacao -> . expr GT expr
    (57) expr_comparacao -> . expr GE expr
    (58) expr_comparacao -> . expr EQ expr
    (59) expr_comparacao -> . expr NE expr
    (60) expr_lista -> . LBRACKET expr_list RBRACKET
    (63) expr_simples -> . ID
    (64) expr_simples -> . NUM
    (65) expr_simples -> . FLOAT
    (66) expr_simples -> . STRING
    (67) expr_simples -> . TRUE
    (68) expr_simples -> . FALSE
    (69) expr_simples -> . ID DOT ID

    INPUT           shift and go to state 47
    OUTPUT          shift and go to state 48
    ID              shift and go to state 54
    LBRACKET        shift and go to state 55
    NUM             shift and go to state 56
    FLOAT           shift and go to state 57
    STRING          shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60

    expr                           shift and go to state 136
    chamada_funcao                 shift and go to state 49
    expr_binop                     shift and go to state 50
    expr_comparacao                shift and go to state 51
    expr_lista                     shift and go to state 52
    expr_simples                   shift and go to state 53

state 123

    (35) send_stmt -> ID DOT SEND COLON . expr SEMICOLON
    (40) expr -> . INPUT LPAREN args RPAREN
    (41) expr -> . OUTPUT LPAREN args RPAREN
    (45) expr -> . chamada_funcao
    (46) expr -> . expr_binop
    (47) expr -> . expr_comparacao
    (48) expr -> . expr_lista
    (49) expr -> . expr_simples
    (42) chamada_funcao -> . ID LPAREN args RPAREN
    (50) expr_binop -> . expr PLUS expr
    (51) expr_binop -> . expr MINUS expr
    (52) expr_binop -> . expr MULT expr
    (53) expr_binop -> . expr DIV expr
    (54) expr_comparacao -> . expr LT expr
    (55) expr_comparacao -> . expr LE expr
    (56) expr_comparacao -> . expr GT expr
    (57) expr_comparacao -> . expr GE expr
    (58) expr_comparacao -> . expr EQ expr
    (59) expr_comparacao -> . expr NE expr
    (60) expr_lista -> . LBRACKET expr_list RBRACKET
    (63) expr_simples -> . ID
    (64) expr_simples -> . NUM
    (65) expr_simples -> . FLOAT
    (66) expr_simples -> . STRING
    (67) expr_simples -> . TRUE
    (68) expr_simples -> . FALSE
    (69) expr_simples -> . ID DOT ID

    INPUT           shift and go to state 47
    OUTPUT          shift and go to state 48
    ID              shift and go to state 54
    LBRACKET        shift and go to state 55
    NUM             shift and go to state 56
    FLOAT           shift and go to state 57
    STRING          shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60

    expr                           shift and go to state 137
    chamada_funcao                 shift and go to state 49
    expr_binop                     shift and go to state 50
    expr_comparacao                shift and go to state 51
    expr_lista                     shift and go to state 52
    expr_simples                   shift and go to state 53

state 124

    (15) declaracao -> C_CHANNEL ASSIGN ID STRING . NUM SEMICOLON

    NUM             shift and go to state 138


state 125

    (70) if_stmt -> IF LPAREN expr RPAREN . LBRACE stmts RBRACE
    (71) if_stmt -> IF LPAREN expr RPAREN . LBRACE stmts RBRACE ELSE LBRACE stmts RBRACE

    LBRACE          shift and go to state 139


state 126

    (30) for_stmt -> FOR LPAREN ID IN . expr RPAREN LBRACE stmts RBRACE
    (40) expr -> . INPUT LPAREN args RPAREN
    (41) expr -> . OUTPUT LPAREN args RPAREN
    (45) expr -> . chamada_funcao
    (46) expr -> . expr_binop
    (47) expr -> . expr_comparacao
    (48) expr -> . expr_lista
    (49) expr -> . expr_simples
    (42) chamada_funcao -> . ID LPAREN args RPAREN
    (50) expr_binop -> . expr PLUS expr
    (51) expr_binop -> . expr MINUS expr
    (52) expr_binop -> . expr MULT expr
    (53) expr_binop -> . expr DIV expr
    (54) expr_comparacao -> . expr LT expr
    (55) expr_comparacao -> . expr LE expr
    (56) expr_comparacao -> . expr GT expr
    (57) expr_comparacao -> . expr GE expr
    (58) expr_comparacao -> . expr EQ expr
    (59) expr_comparacao -> . expr NE expr
    (60) expr_lista -> . LBRACKET expr_list RBRACKET
    (63) expr_simples -> . ID
    (64) expr_simples -> . NUM
    (65) expr_simples -> . FLOAT
    (66) expr_simples -> . STRING
    (67) expr_simples -> . TRUE
    (68) expr_simples -> . FALSE
    (69) expr_simples -> . ID DOT ID

    INPUT           shift and go to state 47
    OUTPUT          shift and go to state 48
    ID              shift and go to state 54
    LBRACKET        shift and go to state 55
    NUM             shift and go to state 56
    FLOAT           shift and go to state 57
    STRING          shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60

    expr                           shift and go to state 140
    chamada_funcao                 shift and go to state 49
    expr_binop                     shift and go to state 50
    expr_comparacao                shift and go to state 51
    expr_lista                     shift and go to state 52
    expr_simples                   shift and go to state 53

state 127

    (31) while_stmt -> WHILE LPAREN expr RPAREN . LBRACE stmts RBRACE

    LBRACE          shift and go to state 141


state 128

    (36) params -> ID . COMMA params
    (37) params -> ID .

    COMMA           shift and go to state 142
    RPAREN          reduce using rule 37 (params -> ID .)


state 129

    (39) def_funcao -> DEF ID LPAREN params . RPAREN LBRACE stmts RBRACE

    RPAREN          shift and go to state 143


state 130

    (32) input -> INPUT LPAREN args RPAREN .

    SEMICOLON       reduce using rule 32 (input -> INPUT LPAREN args RPAREN .)


state 131

    (33) output -> OUTPUT LPAREN args RPAREN .

    SEMICOLON       reduce using rule 33 (output -> OUTPUT LPAREN args RPAREN .)


state 132

    (13) tipo_var -> LIST LT tipo_var GT .

    ID              reduce using rule 13 (tipo_var -> LIST LT tipo_var GT .)
    GT              reduce using rule 13 (tipo_var -> LIST LT tipo_var GT .)


state 133

    (40) expr -> INPUT LPAREN args RPAREN .

    SEMICOLON       reduce using rule 40 (expr -> INPUT LPAREN args RPAREN .)
    PLUS            reduce using rule 40 (expr -> INPUT LPAREN args RPAREN .)
    MINUS           reduce using rule 40 (expr -> INPUT LPAREN args RPAREN .)
    MULT            reduce using rule 40 (expr -> INPUT LPAREN args RPAREN .)
    DIV             reduce using rule 40 (expr -> INPUT LPAREN args RPAREN .)
    LT              reduce using rule 40 (expr -> INPUT LPAREN args RPAREN .)
    LE              reduce using rule 40 (expr -> INPUT LPAREN args RPAREN .)
    GT              reduce using rule 40 (expr -> INPUT LPAREN args RPAREN .)
    GE              reduce using rule 40 (expr -> INPUT LPAREN args RPAREN .)
    EQ              reduce using rule 40 (expr -> INPUT LPAREN args RPAREN .)
    NE              reduce using rule 40 (expr -> INPUT LPAREN args RPAREN .)
    COMMA           reduce using rule 40 (expr -> INPUT LPAREN args RPAREN .)
    RBRACKET        reduce using rule 40 (expr -> INPUT LPAREN args RPAREN .)
    RPAREN          reduce using rule 40 (expr -> INPUT LPAREN args RPAREN .)


state 134

    (41) expr -> OUTPUT LPAREN args RPAREN .

    SEMICOLON       reduce using rule 41 (expr -> OUTPUT LPAREN args RPAREN .)
    PLUS            reduce using rule 41 (expr -> OUTPUT LPAREN args RPAREN .)
    MINUS           reduce using rule 41 (expr -> OUTPUT LPAREN args RPAREN .)
    MULT            reduce using rule 41 (expr -> OUTPUT LPAREN args RPAREN .)
    DIV             reduce using rule 41 (expr -> OUTPUT LPAREN args RPAREN .)
    LT              reduce using rule 41 (expr -> OUTPUT LPAREN args RPAREN .)
    LE              reduce using rule 41 (expr -> OUTPUT LPAREN args RPAREN .)
    GT              reduce using rule 41 (expr -> OUTPUT LPAREN args RPAREN .)
    GE              reduce using rule 41 (expr -> OUTPUT LPAREN args RPAREN .)
    EQ              reduce using rule 41 (expr -> OUTPUT LPAREN args RPAREN .)
    NE              reduce using rule 41 (expr -> OUTPUT LPAREN args RPAREN .)
    COMMA           reduce using rule 41 (expr -> OUTPUT LPAREN args RPAREN .)
    RBRACKET        reduce using rule 41 (expr -> OUTPUT LPAREN args RPAREN .)
    RPAREN          reduce using rule 41 (expr -> OUTPUT LPAREN args RPAREN .)


state 135

    (62) expr_list -> expr COMMA expr_list .

    RBRACKET        reduce using rule 62 (expr_list -> expr COMMA expr_list .)
    RPAREN          reduce using rule 62 (expr_list -> expr COMMA expr_list .)


state 136

    (34) receive_stmt -> ID DOT RECEIVE COLON expr . SEMICOLON
    (50) expr_binop -> expr . PLUS expr
    (51) expr_binop -> expr . MINUS expr
    (52) expr_binop -> expr . MULT expr
    (53) expr_binop -> expr . DIV expr
    (54) expr_comparacao -> expr . LT expr
    (55) expr_comparacao -> expr . LE expr
    (56) expr_comparacao -> expr . GT expr
    (57) expr_comparacao -> expr . GE expr
    (58) expr_comparacao -> expr . EQ expr
    (59) expr_comparacao -> expr . NE expr

    SEMICOLON       shift and go to state 144
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    MULT            shift and go to state 77
    DIV             shift and go to state 78
    LT              shift and go to state 79
    LE              shift and go to state 80
    GT              shift and go to state 81
    GE              shift and go to state 82
    EQ              shift and go to state 83
    NE              shift and go to state 84


state 137

    (35) send_stmt -> ID DOT SEND COLON expr . SEMICOLON
    (50) expr_binop -> expr . PLUS expr
    (51) expr_binop -> expr . MINUS expr
    (52) expr_binop -> expr . MULT expr
    (53) expr_binop -> expr . DIV expr
    (54) expr_comparacao -> expr . LT expr
    (55) expr_comparacao -> expr . LE expr
    (56) expr_comparacao -> expr . GT expr
    (57) expr_comparacao -> expr . GE expr
    (58) expr_comparacao -> expr . EQ expr
    (59) expr_comparacao -> expr . NE expr

    SEMICOLON       shift and go to state 145
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    MULT            shift and go to state 77
    DIV             shift and go to state 78
    LT              shift and go to state 79
    LE              shift and go to state 80
    GT              shift and go to state 81
    GE              shift and go to state 82
    EQ              shift and go to state 83
    NE              shift and go to state 84


state 138

    (15) declaracao -> C_CHANNEL ASSIGN ID STRING NUM . SEMICOLON

    SEMICOLON       shift and go to state 146


state 139

    (70) if_stmt -> IF LPAREN expr RPAREN LBRACE . stmts RBRACE
    (71) if_stmt -> IF LPAREN expr RPAREN LBRACE . stmts RBRACE ELSE LBRACE stmts RBRACE
    (6) stmts -> . stmt
    (7) stmts -> . stmt stmts
    (17) stmt -> . declaracao SEMICOLON
    (18) stmt -> . atribuicao SEMICOLON
    (19) stmt -> . if_stmt
    (20) stmt -> . for_stmt
    (21) stmt -> . while_stmt
    (22) stmt -> . def_funcao
    (23) stmt -> . input SEMICOLON
    (24) stmt -> . output SEMICOLON
    (25) stmt -> . chamada_funcao SEMICOLON
    (26) stmt -> . receive_stmt
    (27) stmt -> . send_stmt
    (28) stmt -> . RETURN expr SEMICOLON
    (29) stmt -> . COMMENT
    (14) declaracao -> . tipo_var ID ASSIGN expr
    (15) declaracao -> . C_CHANNEL ASSIGN ID STRING NUM SEMICOLON
    (16) atribuicao -> . ID ASSIGN expr
    (70) if_stmt -> . IF LPAREN expr RPAREN LBRACE stmts RBRACE
    (71) if_stmt -> . IF LPAREN expr RPAREN LBRACE stmts RBRACE ELSE LBRACE stmts RBRACE
    (30) for_stmt -> . FOR LPAREN ID IN expr RPAREN LBRACE stmts RBRACE
    (31) while_stmt -> . WHILE LPAREN expr RPAREN LBRACE stmts RBRACE
    (39) def_funcao -> . DEF ID LPAREN params RPAREN LBRACE stmts RBRACE
    (32) input -> . INPUT LPAREN args RPAREN
    (33) output -> . OUTPUT LPAREN args RPAREN
    (42) chamada_funcao -> . ID LPAREN args RPAREN
    (34) receive_stmt -> . ID DOT RECEIVE COLON expr SEMICOLON
    (35) send_stmt -> . ID DOT SEND COLON expr SEMICOLON
    (8) tipo_var -> . BOOL
    (9) tipo_var -> . INT
    (10) tipo_var -> . FLOAT_TYPE
    (11) tipo_var -> . STRING_TYPE
    (12) tipo_var -> . C_CHANNEL
    (13) tipo_var -> . LIST LT tipo_var GT

    RETURN          shift and go to state 22
    COMMENT         shift and go to state 23
    C_CHANNEL       shift and go to state 26
    ID              shift and go to state 25
    IF              shift and go to state 27
    FOR             shift and go to state 28
    WHILE           shift and go to state 29
    DEF             shift and go to state 30
    INPUT           shift and go to state 31
    OUTPUT          shift and go to state 32
    BOOL            shift and go to state 33
    INT             shift and go to state 34
    FLOAT_TYPE      shift and go to state 35
    STRING_TYPE     shift and go to state 36
    LIST            shift and go to state 37

    stmts                          shift and go to state 147
    stmt                           shift and go to state 10
    declaracao                     shift and go to state 11
    atribuicao                     shift and go to state 12
    if_stmt                        shift and go to state 13
    for_stmt                       shift and go to state 14
    while_stmt                     shift and go to state 15
    def_funcao                     shift and go to state 16
    input                          shift and go to state 17
    output                         shift and go to state 18
    chamada_funcao                 shift and go to state 19
    receive_stmt                   shift and go to state 20
    send_stmt                      shift and go to state 21
    tipo_var                       shift and go to state 24

state 140

    (30) for_stmt -> FOR LPAREN ID IN expr . RPAREN LBRACE stmts RBRACE
    (50) expr_binop -> expr . PLUS expr
    (51) expr_binop -> expr . MINUS expr
    (52) expr_binop -> expr . MULT expr
    (53) expr_binop -> expr . DIV expr
    (54) expr_comparacao -> expr . LT expr
    (55) expr_comparacao -> expr . LE expr
    (56) expr_comparacao -> expr . GT expr
    (57) expr_comparacao -> expr . GE expr
    (58) expr_comparacao -> expr . EQ expr
    (59) expr_comparacao -> expr . NE expr

    RPAREN          shift and go to state 148
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    MULT            shift and go to state 77
    DIV             shift and go to state 78
    LT              shift and go to state 79
    LE              shift and go to state 80
    GT              shift and go to state 81
    GE              shift and go to state 82
    EQ              shift and go to state 83
    NE              shift and go to state 84


state 141

    (31) while_stmt -> WHILE LPAREN expr RPAREN LBRACE . stmts RBRACE
    (6) stmts -> . stmt
    (7) stmts -> . stmt stmts
    (17) stmt -> . declaracao SEMICOLON
    (18) stmt -> . atribuicao SEMICOLON
    (19) stmt -> . if_stmt
    (20) stmt -> . for_stmt
    (21) stmt -> . while_stmt
    (22) stmt -> . def_funcao
    (23) stmt -> . input SEMICOLON
    (24) stmt -> . output SEMICOLON
    (25) stmt -> . chamada_funcao SEMICOLON
    (26) stmt -> . receive_stmt
    (27) stmt -> . send_stmt
    (28) stmt -> . RETURN expr SEMICOLON
    (29) stmt -> . COMMENT
    (14) declaracao -> . tipo_var ID ASSIGN expr
    (15) declaracao -> . C_CHANNEL ASSIGN ID STRING NUM SEMICOLON
    (16) atribuicao -> . ID ASSIGN expr
    (70) if_stmt -> . IF LPAREN expr RPAREN LBRACE stmts RBRACE
    (71) if_stmt -> . IF LPAREN expr RPAREN LBRACE stmts RBRACE ELSE LBRACE stmts RBRACE
    (30) for_stmt -> . FOR LPAREN ID IN expr RPAREN LBRACE stmts RBRACE
    (31) while_stmt -> . WHILE LPAREN expr RPAREN LBRACE stmts RBRACE
    (39) def_funcao -> . DEF ID LPAREN params RPAREN LBRACE stmts RBRACE
    (32) input -> . INPUT LPAREN args RPAREN
    (33) output -> . OUTPUT LPAREN args RPAREN
    (42) chamada_funcao -> . ID LPAREN args RPAREN
    (34) receive_stmt -> . ID DOT RECEIVE COLON expr SEMICOLON
    (35) send_stmt -> . ID DOT SEND COLON expr SEMICOLON
    (8) tipo_var -> . BOOL
    (9) tipo_var -> . INT
    (10) tipo_var -> . FLOAT_TYPE
    (11) tipo_var -> . STRING_TYPE
    (12) tipo_var -> . C_CHANNEL
    (13) tipo_var -> . LIST LT tipo_var GT

    RETURN          shift and go to state 22
    COMMENT         shift and go to state 23
    C_CHANNEL       shift and go to state 26
    ID              shift and go to state 25
    IF              shift and go to state 27
    FOR             shift and go to state 28
    WHILE           shift and go to state 29
    DEF             shift and go to state 30
    INPUT           shift and go to state 31
    OUTPUT          shift and go to state 32
    BOOL            shift and go to state 33
    INT             shift and go to state 34
    FLOAT_TYPE      shift and go to state 35
    STRING_TYPE     shift and go to state 36
    LIST            shift and go to state 37

    stmts                          shift and go to state 149
    stmt                           shift and go to state 10
    declaracao                     shift and go to state 11
    atribuicao                     shift and go to state 12
    if_stmt                        shift and go to state 13
    for_stmt                       shift and go to state 14
    while_stmt                     shift and go to state 15
    def_funcao                     shift and go to state 16
    input                          shift and go to state 17
    output                         shift and go to state 18
    chamada_funcao                 shift and go to state 19
    receive_stmt                   shift and go to state 20
    send_stmt                      shift and go to state 21
    tipo_var                       shift and go to state 24

state 142

    (36) params -> ID COMMA . params
    (36) params -> . ID COMMA params
    (37) params -> . ID
    (38) params -> .

    ID              shift and go to state 128
    RPAREN          reduce using rule 38 (params -> .)

    params                         shift and go to state 150

state 143

    (39) def_funcao -> DEF ID LPAREN params RPAREN . LBRACE stmts RBRACE

    LBRACE          shift and go to state 151


state 144

    (34) receive_stmt -> ID DOT RECEIVE COLON expr SEMICOLON .

    RETURN          reduce using rule 34 (receive_stmt -> ID DOT RECEIVE COLON expr SEMICOLON .)
    COMMENT         reduce using rule 34 (receive_stmt -> ID DOT RECEIVE COLON expr SEMICOLON .)
    C_CHANNEL       reduce using rule 34 (receive_stmt -> ID DOT RECEIVE COLON expr SEMICOLON .)
    ID              reduce using rule 34 (receive_stmt -> ID DOT RECEIVE COLON expr SEMICOLON .)
    IF              reduce using rule 34 (receive_stmt -> ID DOT RECEIVE COLON expr SEMICOLON .)
    FOR             reduce using rule 34 (receive_stmt -> ID DOT RECEIVE COLON expr SEMICOLON .)
    WHILE           reduce using rule 34 (receive_stmt -> ID DOT RECEIVE COLON expr SEMICOLON .)
    DEF             reduce using rule 34 (receive_stmt -> ID DOT RECEIVE COLON expr SEMICOLON .)
    INPUT           reduce using rule 34 (receive_stmt -> ID DOT RECEIVE COLON expr SEMICOLON .)
    OUTPUT          reduce using rule 34 (receive_stmt -> ID DOT RECEIVE COLON expr SEMICOLON .)
    BOOL            reduce using rule 34 (receive_stmt -> ID DOT RECEIVE COLON expr SEMICOLON .)
    INT             reduce using rule 34 (receive_stmt -> ID DOT RECEIVE COLON expr SEMICOLON .)
    FLOAT_TYPE      reduce using rule 34 (receive_stmt -> ID DOT RECEIVE COLON expr SEMICOLON .)
    STRING_TYPE     reduce using rule 34 (receive_stmt -> ID DOT RECEIVE COLON expr SEMICOLON .)
    LIST            reduce using rule 34 (receive_stmt -> ID DOT RECEIVE COLON expr SEMICOLON .)
    RBRACE          reduce using rule 34 (receive_stmt -> ID DOT RECEIVE COLON expr SEMICOLON .)


state 145

    (35) send_stmt -> ID DOT SEND COLON expr SEMICOLON .

    RETURN          reduce using rule 35 (send_stmt -> ID DOT SEND COLON expr SEMICOLON .)
    COMMENT         reduce using rule 35 (send_stmt -> ID DOT SEND COLON expr SEMICOLON .)
    C_CHANNEL       reduce using rule 35 (send_stmt -> ID DOT SEND COLON expr SEMICOLON .)
    ID              reduce using rule 35 (send_stmt -> ID DOT SEND COLON expr SEMICOLON .)
    IF              reduce using rule 35 (send_stmt -> ID DOT SEND COLON expr SEMICOLON .)
    FOR             reduce using rule 35 (send_stmt -> ID DOT SEND COLON expr SEMICOLON .)
    WHILE           reduce using rule 35 (send_stmt -> ID DOT SEND COLON expr SEMICOLON .)
    DEF             reduce using rule 35 (send_stmt -> ID DOT SEND COLON expr SEMICOLON .)
    INPUT           reduce using rule 35 (send_stmt -> ID DOT SEND COLON expr SEMICOLON .)
    OUTPUT          reduce using rule 35 (send_stmt -> ID DOT SEND COLON expr SEMICOLON .)
    BOOL            reduce using rule 35 (send_stmt -> ID DOT SEND COLON expr SEMICOLON .)
    INT             reduce using rule 35 (send_stmt -> ID DOT SEND COLON expr SEMICOLON .)
    FLOAT_TYPE      reduce using rule 35 (send_stmt -> ID DOT SEND COLON expr SEMICOLON .)
    STRING_TYPE     reduce using rule 35 (send_stmt -> ID DOT SEND COLON expr SEMICOLON .)
    LIST            reduce using rule 35 (send_stmt -> ID DOT SEND COLON expr SEMICOLON .)
    RBRACE          reduce using rule 35 (send_stmt -> ID DOT SEND COLON expr SEMICOLON .)


state 146

    (15) declaracao -> C_CHANNEL ASSIGN ID STRING NUM SEMICOLON .

    SEMICOLON       reduce using rule 15 (declaracao -> C_CHANNEL ASSIGN ID STRING NUM SEMICOLON .)


state 147

    (70) if_stmt -> IF LPAREN expr RPAREN LBRACE stmts . RBRACE
    (71) if_stmt -> IF LPAREN expr RPAREN LBRACE stmts . RBRACE ELSE LBRACE stmts RBRACE

    RBRACE          shift and go to state 152


state 148

    (30) for_stmt -> FOR LPAREN ID IN expr RPAREN . LBRACE stmts RBRACE

    LBRACE          shift and go to state 153


state 149

    (31) while_stmt -> WHILE LPAREN expr RPAREN LBRACE stmts . RBRACE

    RBRACE          shift and go to state 154


state 150

    (36) params -> ID COMMA params .

    RPAREN          reduce using rule 36 (params -> ID COMMA params .)


state 151

    (39) def_funcao -> DEF ID LPAREN params RPAREN LBRACE . stmts RBRACE
    (6) stmts -> . stmt
    (7) stmts -> . stmt stmts
    (17) stmt -> . declaracao SEMICOLON
    (18) stmt -> . atribuicao SEMICOLON
    (19) stmt -> . if_stmt
    (20) stmt -> . for_stmt
    (21) stmt -> . while_stmt
    (22) stmt -> . def_funcao
    (23) stmt -> . input SEMICOLON
    (24) stmt -> . output SEMICOLON
    (25) stmt -> . chamada_funcao SEMICOLON
    (26) stmt -> . receive_stmt
    (27) stmt -> . send_stmt
    (28) stmt -> . RETURN expr SEMICOLON
    (29) stmt -> . COMMENT
    (14) declaracao -> . tipo_var ID ASSIGN expr
    (15) declaracao -> . C_CHANNEL ASSIGN ID STRING NUM SEMICOLON
    (16) atribuicao -> . ID ASSIGN expr
    (70) if_stmt -> . IF LPAREN expr RPAREN LBRACE stmts RBRACE
    (71) if_stmt -> . IF LPAREN expr RPAREN LBRACE stmts RBRACE ELSE LBRACE stmts RBRACE
    (30) for_stmt -> . FOR LPAREN ID IN expr RPAREN LBRACE stmts RBRACE
    (31) while_stmt -> . WHILE LPAREN expr RPAREN LBRACE stmts RBRACE
    (39) def_funcao -> . DEF ID LPAREN params RPAREN LBRACE stmts RBRACE
    (32) input -> . INPUT LPAREN args RPAREN
    (33) output -> . OUTPUT LPAREN args RPAREN
    (42) chamada_funcao -> . ID LPAREN args RPAREN
    (34) receive_stmt -> . ID DOT RECEIVE COLON expr SEMICOLON
    (35) send_stmt -> . ID DOT SEND COLON expr SEMICOLON
    (8) tipo_var -> . BOOL
    (9) tipo_var -> . INT
    (10) tipo_var -> . FLOAT_TYPE
    (11) tipo_var -> . STRING_TYPE
    (12) tipo_var -> . C_CHANNEL
    (13) tipo_var -> . LIST LT tipo_var GT

    RETURN          shift and go to state 22
    COMMENT         shift and go to state 23
    C_CHANNEL       shift and go to state 26
    ID              shift and go to state 25
    IF              shift and go to state 27
    FOR             shift and go to state 28
    WHILE           shift and go to state 29
    DEF             shift and go to state 30
    INPUT           shift and go to state 31
    OUTPUT          shift and go to state 32
    BOOL            shift and go to state 33
    INT             shift and go to state 34
    FLOAT_TYPE      shift and go to state 35
    STRING_TYPE     shift and go to state 36
    LIST            shift and go to state 37

    stmts                          shift and go to state 155
    stmt                           shift and go to state 10
    declaracao                     shift and go to state 11
    atribuicao                     shift and go to state 12
    if_stmt                        shift and go to state 13
    for_stmt                       shift and go to state 14
    while_stmt                     shift and go to state 15
    def_funcao                     shift and go to state 16
    input                          shift and go to state 17
    output                         shift and go to state 18
    chamada_funcao                 shift and go to state 19
    receive_stmt                   shift and go to state 20
    send_stmt                      shift and go to state 21
    tipo_var                       shift and go to state 24

state 152

    (70) if_stmt -> IF LPAREN expr RPAREN LBRACE stmts RBRACE .
    (71) if_stmt -> IF LPAREN expr RPAREN LBRACE stmts RBRACE . ELSE LBRACE stmts RBRACE

    RETURN          reduce using rule 70 (if_stmt -> IF LPAREN expr RPAREN LBRACE stmts RBRACE .)
    COMMENT         reduce using rule 70 (if_stmt -> IF LPAREN expr RPAREN LBRACE stmts RBRACE .)
    C_CHANNEL       reduce using rule 70 (if_stmt -> IF LPAREN expr RPAREN LBRACE stmts RBRACE .)
    ID              reduce using rule 70 (if_stmt -> IF LPAREN expr RPAREN LBRACE stmts RBRACE .)
    IF              reduce using rule 70 (if_stmt -> IF LPAREN expr RPAREN LBRACE stmts RBRACE .)
    FOR             reduce using rule 70 (if_stmt -> IF LPAREN expr RPAREN LBRACE stmts RBRACE .)
    WHILE           reduce using rule 70 (if_stmt -> IF LPAREN expr RPAREN LBRACE stmts RBRACE .)
    DEF             reduce using rule 70 (if_stmt -> IF LPAREN expr RPAREN LBRACE stmts RBRACE .)
    INPUT           reduce using rule 70 (if_stmt -> IF LPAREN expr RPAREN LBRACE stmts RBRACE .)
    OUTPUT          reduce using rule 70 (if_stmt -> IF LPAREN expr RPAREN LBRACE stmts RBRACE .)
    BOOL            reduce using rule 70 (if_stmt -> IF LPAREN expr RPAREN LBRACE stmts RBRACE .)
    INT             reduce using rule 70 (if_stmt -> IF LPAREN expr RPAREN LBRACE stmts RBRACE .)
    FLOAT_TYPE      reduce using rule 70 (if_stmt -> IF LPAREN expr RPAREN LBRACE stmts RBRACE .)
    STRING_TYPE     reduce using rule 70 (if_stmt -> IF LPAREN expr RPAREN LBRACE stmts RBRACE .)
    LIST            reduce using rule 70 (if_stmt -> IF LPAREN expr RPAREN LBRACE stmts RBRACE .)
    RBRACE          reduce using rule 70 (if_stmt -> IF LPAREN expr RPAREN LBRACE stmts RBRACE .)
    ELSE            shift and go to state 156


state 153

    (30) for_stmt -> FOR LPAREN ID IN expr RPAREN LBRACE . stmts RBRACE
    (6) stmts -> . stmt
    (7) stmts -> . stmt stmts
    (17) stmt -> . declaracao SEMICOLON
    (18) stmt -> . atribuicao SEMICOLON
    (19) stmt -> . if_stmt
    (20) stmt -> . for_stmt
    (21) stmt -> . while_stmt
    (22) stmt -> . def_funcao
    (23) stmt -> . input SEMICOLON
    (24) stmt -> . output SEMICOLON
    (25) stmt -> . chamada_funcao SEMICOLON
    (26) stmt -> . receive_stmt
    (27) stmt -> . send_stmt
    (28) stmt -> . RETURN expr SEMICOLON
    (29) stmt -> . COMMENT
    (14) declaracao -> . tipo_var ID ASSIGN expr
    (15) declaracao -> . C_CHANNEL ASSIGN ID STRING NUM SEMICOLON
    (16) atribuicao -> . ID ASSIGN expr
    (70) if_stmt -> . IF LPAREN expr RPAREN LBRACE stmts RBRACE
    (71) if_stmt -> . IF LPAREN expr RPAREN LBRACE stmts RBRACE ELSE LBRACE stmts RBRACE
    (30) for_stmt -> . FOR LPAREN ID IN expr RPAREN LBRACE stmts RBRACE
    (31) while_stmt -> . WHILE LPAREN expr RPAREN LBRACE stmts RBRACE
    (39) def_funcao -> . DEF ID LPAREN params RPAREN LBRACE stmts RBRACE
    (32) input -> . INPUT LPAREN args RPAREN
    (33) output -> . OUTPUT LPAREN args RPAREN
    (42) chamada_funcao -> . ID LPAREN args RPAREN
    (34) receive_stmt -> . ID DOT RECEIVE COLON expr SEMICOLON
    (35) send_stmt -> . ID DOT SEND COLON expr SEMICOLON
    (8) tipo_var -> . BOOL
    (9) tipo_var -> . INT
    (10) tipo_var -> . FLOAT_TYPE
    (11) tipo_var -> . STRING_TYPE
    (12) tipo_var -> . C_CHANNEL
    (13) tipo_var -> . LIST LT tipo_var GT

    RETURN          shift and go to state 22
    COMMENT         shift and go to state 23
    C_CHANNEL       shift and go to state 26
    ID              shift and go to state 25
    IF              shift and go to state 27
    FOR             shift and go to state 28
    WHILE           shift and go to state 29
    DEF             shift and go to state 30
    INPUT           shift and go to state 31
    OUTPUT          shift and go to state 32
    BOOL            shift and go to state 33
    INT             shift and go to state 34
    FLOAT_TYPE      shift and go to state 35
    STRING_TYPE     shift and go to state 36
    LIST            shift and go to state 37

    stmts                          shift and go to state 157
    stmt                           shift and go to state 10
    declaracao                     shift and go to state 11
    atribuicao                     shift and go to state 12
    if_stmt                        shift and go to state 13
    for_stmt                       shift and go to state 14
    while_stmt                     shift and go to state 15
    def_funcao                     shift and go to state 16
    input                          shift and go to state 17
    output                         shift and go to state 18
    chamada_funcao                 shift and go to state 19
    receive_stmt                   shift and go to state 20
    send_stmt                      shift and go to state 21
    tipo_var                       shift and go to state 24

state 154

    (31) while_stmt -> WHILE LPAREN expr RPAREN LBRACE stmts RBRACE .

    RETURN          reduce using rule 31 (while_stmt -> WHILE LPAREN expr RPAREN LBRACE stmts RBRACE .)
    COMMENT         reduce using rule 31 (while_stmt -> WHILE LPAREN expr RPAREN LBRACE stmts RBRACE .)
    C_CHANNEL       reduce using rule 31 (while_stmt -> WHILE LPAREN expr RPAREN LBRACE stmts RBRACE .)
    ID              reduce using rule 31 (while_stmt -> WHILE LPAREN expr RPAREN LBRACE stmts RBRACE .)
    IF              reduce using rule 31 (while_stmt -> WHILE LPAREN expr RPAREN LBRACE stmts RBRACE .)
    FOR             reduce using rule 31 (while_stmt -> WHILE LPAREN expr RPAREN LBRACE stmts RBRACE .)
    WHILE           reduce using rule 31 (while_stmt -> WHILE LPAREN expr RPAREN LBRACE stmts RBRACE .)
    DEF             reduce using rule 31 (while_stmt -> WHILE LPAREN expr RPAREN LBRACE stmts RBRACE .)
    INPUT           reduce using rule 31 (while_stmt -> WHILE LPAREN expr RPAREN LBRACE stmts RBRACE .)
    OUTPUT          reduce using rule 31 (while_stmt -> WHILE LPAREN expr RPAREN LBRACE stmts RBRACE .)
    BOOL            reduce using rule 31 (while_stmt -> WHILE LPAREN expr RPAREN LBRACE stmts RBRACE .)
    INT             reduce using rule 31 (while_stmt -> WHILE LPAREN expr RPAREN LBRACE stmts RBRACE .)
    FLOAT_TYPE      reduce using rule 31 (while_stmt -> WHILE LPAREN expr RPAREN LBRACE stmts RBRACE .)
    STRING_TYPE     reduce using rule 31 (while_stmt -> WHILE LPAREN expr RPAREN LBRACE stmts RBRACE .)
    LIST            reduce using rule 31 (while_stmt -> WHILE LPAREN expr RPAREN LBRACE stmts RBRACE .)
    RBRACE          reduce using rule 31 (while_stmt -> WHILE LPAREN expr RPAREN LBRACE stmts RBRACE .)


state 155

    (39) def_funcao -> DEF ID LPAREN params RPAREN LBRACE stmts . RBRACE

    RBRACE          shift and go to state 158


state 156

    (71) if_stmt -> IF LPAREN expr RPAREN LBRACE stmts RBRACE ELSE . LBRACE stmts RBRACE

    LBRACE          shift and go to state 159


state 157

    (30) for_stmt -> FOR LPAREN ID IN expr RPAREN LBRACE stmts . RBRACE

    RBRACE          shift and go to state 160


state 158

    (39) def_funcao -> DEF ID LPAREN params RPAREN LBRACE stmts RBRACE .

    RETURN          reduce using rule 39 (def_funcao -> DEF ID LPAREN params RPAREN LBRACE stmts RBRACE .)
    COMMENT         reduce using rule 39 (def_funcao -> DEF ID LPAREN params RPAREN LBRACE stmts RBRACE .)
    C_CHANNEL       reduce using rule 39 (def_funcao -> DEF ID LPAREN params RPAREN LBRACE stmts RBRACE .)
    ID              reduce using rule 39 (def_funcao -> DEF ID LPAREN params RPAREN LBRACE stmts RBRACE .)
    IF              reduce using rule 39 (def_funcao -> DEF ID LPAREN params RPAREN LBRACE stmts RBRACE .)
    FOR             reduce using rule 39 (def_funcao -> DEF ID LPAREN params RPAREN LBRACE stmts RBRACE .)
    WHILE           reduce using rule 39 (def_funcao -> DEF ID LPAREN params RPAREN LBRACE stmts RBRACE .)
    DEF             reduce using rule 39 (def_funcao -> DEF ID LPAREN params RPAREN LBRACE stmts RBRACE .)
    INPUT           reduce using rule 39 (def_funcao -> DEF ID LPAREN params RPAREN LBRACE stmts RBRACE .)
    OUTPUT          reduce using rule 39 (def_funcao -> DEF ID LPAREN params RPAREN LBRACE stmts RBRACE .)
    BOOL            reduce using rule 39 (def_funcao -> DEF ID LPAREN params RPAREN LBRACE stmts RBRACE .)
    INT             reduce using rule 39 (def_funcao -> DEF ID LPAREN params RPAREN LBRACE stmts RBRACE .)
    FLOAT_TYPE      reduce using rule 39 (def_funcao -> DEF ID LPAREN params RPAREN LBRACE stmts RBRACE .)
    STRING_TYPE     reduce using rule 39 (def_funcao -> DEF ID LPAREN params RPAREN LBRACE stmts RBRACE .)
    LIST            reduce using rule 39 (def_funcao -> DEF ID LPAREN params RPAREN LBRACE stmts RBRACE .)
    RBRACE          reduce using rule 39 (def_funcao -> DEF ID LPAREN params RPAREN LBRACE stmts RBRACE .)


state 159

    (71) if_stmt -> IF LPAREN expr RPAREN LBRACE stmts RBRACE ELSE LBRACE . stmts RBRACE
    (6) stmts -> . stmt
    (7) stmts -> . stmt stmts
    (17) stmt -> . declaracao SEMICOLON
    (18) stmt -> . atribuicao SEMICOLON
    (19) stmt -> . if_stmt
    (20) stmt -> . for_stmt
    (21) stmt -> . while_stmt
    (22) stmt -> . def_funcao
    (23) stmt -> . input SEMICOLON
    (24) stmt -> . output SEMICOLON
    (25) stmt -> . chamada_funcao SEMICOLON
    (26) stmt -> . receive_stmt
    (27) stmt -> . send_stmt
    (28) stmt -> . RETURN expr SEMICOLON
    (29) stmt -> . COMMENT
    (14) declaracao -> . tipo_var ID ASSIGN expr
    (15) declaracao -> . C_CHANNEL ASSIGN ID STRING NUM SEMICOLON
    (16) atribuicao -> . ID ASSIGN expr
    (70) if_stmt -> . IF LPAREN expr RPAREN LBRACE stmts RBRACE
    (71) if_stmt -> . IF LPAREN expr RPAREN LBRACE stmts RBRACE ELSE LBRACE stmts RBRACE
    (30) for_stmt -> . FOR LPAREN ID IN expr RPAREN LBRACE stmts RBRACE
    (31) while_stmt -> . WHILE LPAREN expr RPAREN LBRACE stmts RBRACE
    (39) def_funcao -> . DEF ID LPAREN params RPAREN LBRACE stmts RBRACE
    (32) input -> . INPUT LPAREN args RPAREN
    (33) output -> . OUTPUT LPAREN args RPAREN
    (42) chamada_funcao -> . ID LPAREN args RPAREN
    (34) receive_stmt -> . ID DOT RECEIVE COLON expr SEMICOLON
    (35) send_stmt -> . ID DOT SEND COLON expr SEMICOLON
    (8) tipo_var -> . BOOL
    (9) tipo_var -> . INT
    (10) tipo_var -> . FLOAT_TYPE
    (11) tipo_var -> . STRING_TYPE
    (12) tipo_var -> . C_CHANNEL
    (13) tipo_var -> . LIST LT tipo_var GT

    RETURN          shift and go to state 22
    COMMENT         shift and go to state 23
    C_CHANNEL       shift and go to state 26
    ID              shift and go to state 25
    IF              shift and go to state 27
    FOR             shift and go to state 28
    WHILE           shift and go to state 29
    DEF             shift and go to state 30
    INPUT           shift and go to state 31
    OUTPUT          shift and go to state 32
    BOOL            shift and go to state 33
    INT             shift and go to state 34
    FLOAT_TYPE      shift and go to state 35
    STRING_TYPE     shift and go to state 36
    LIST            shift and go to state 37

    stmts                          shift and go to state 161
    stmt                           shift and go to state 10
    declaracao                     shift and go to state 11
    atribuicao                     shift and go to state 12
    if_stmt                        shift and go to state 13
    for_stmt                       shift and go to state 14
    while_stmt                     shift and go to state 15
    def_funcao                     shift and go to state 16
    input                          shift and go to state 17
    output                         shift and go to state 18
    chamada_funcao                 shift and go to state 19
    receive_stmt                   shift and go to state 20
    send_stmt                      shift and go to state 21
    tipo_var                       shift and go to state 24

state 160

    (30) for_stmt -> FOR LPAREN ID IN expr RPAREN LBRACE stmts RBRACE .

    RETURN          reduce using rule 30 (for_stmt -> FOR LPAREN ID IN expr RPAREN LBRACE stmts RBRACE .)
    COMMENT         reduce using rule 30 (for_stmt -> FOR LPAREN ID IN expr RPAREN LBRACE stmts RBRACE .)
    C_CHANNEL       reduce using rule 30 (for_stmt -> FOR LPAREN ID IN expr RPAREN LBRACE stmts RBRACE .)
    ID              reduce using rule 30 (for_stmt -> FOR LPAREN ID IN expr RPAREN LBRACE stmts RBRACE .)
    IF              reduce using rule 30 (for_stmt -> FOR LPAREN ID IN expr RPAREN LBRACE stmts RBRACE .)
    FOR             reduce using rule 30 (for_stmt -> FOR LPAREN ID IN expr RPAREN LBRACE stmts RBRACE .)
    WHILE           reduce using rule 30 (for_stmt -> FOR LPAREN ID IN expr RPAREN LBRACE stmts RBRACE .)
    DEF             reduce using rule 30 (for_stmt -> FOR LPAREN ID IN expr RPAREN LBRACE stmts RBRACE .)
    INPUT           reduce using rule 30 (for_stmt -> FOR LPAREN ID IN expr RPAREN LBRACE stmts RBRACE .)
    OUTPUT          reduce using rule 30 (for_stmt -> FOR LPAREN ID IN expr RPAREN LBRACE stmts RBRACE .)
    BOOL            reduce using rule 30 (for_stmt -> FOR LPAREN ID IN expr RPAREN LBRACE stmts RBRACE .)
    INT             reduce using rule 30 (for_stmt -> FOR LPAREN ID IN expr RPAREN LBRACE stmts RBRACE .)
    FLOAT_TYPE      reduce using rule 30 (for_stmt -> FOR LPAREN ID IN expr RPAREN LBRACE stmts RBRACE .)
    STRING_TYPE     reduce using rule 30 (for_stmt -> FOR LPAREN ID IN expr RPAREN LBRACE stmts RBRACE .)
    LIST            reduce using rule 30 (for_stmt -> FOR LPAREN ID IN expr RPAREN LBRACE stmts RBRACE .)
    RBRACE          reduce using rule 30 (for_stmt -> FOR LPAREN ID IN expr RPAREN LBRACE stmts RBRACE .)


state 161

    (71) if_stmt -> IF LPAREN expr RPAREN LBRACE stmts RBRACE ELSE LBRACE stmts . RBRACE

    RBRACE          shift and go to state 162


state 162

    (71) if_stmt -> IF LPAREN expr RPAREN LBRACE stmts RBRACE ELSE LBRACE stmts RBRACE .

    RETURN          reduce using rule 71 (if_stmt -> IF LPAREN expr RPAREN LBRACE stmts RBRACE ELSE LBRACE stmts RBRACE .)
    COMMENT         reduce using rule 71 (if_stmt -> IF LPAREN expr RPAREN LBRACE stmts RBRACE ELSE LBRACE stmts RBRACE .)
    C_CHANNEL       reduce using rule 71 (if_stmt -> IF LPAREN expr RPAREN LBRACE stmts RBRACE ELSE LBRACE stmts RBRACE .)
    ID              reduce using rule 71 (if_stmt -> IF LPAREN expr RPAREN LBRACE stmts RBRACE ELSE LBRACE stmts RBRACE .)
    IF              reduce using rule 71 (if_stmt -> IF LPAREN expr RPAREN LBRACE stmts RBRACE ELSE LBRACE stmts RBRACE .)
    FOR             reduce using rule 71 (if_stmt -> IF LPAREN expr RPAREN LBRACE stmts RBRACE ELSE LBRACE stmts RBRACE .)
    WHILE           reduce using rule 71 (if_stmt -> IF LPAREN expr RPAREN LBRACE stmts RBRACE ELSE LBRACE stmts RBRACE .)
    DEF             reduce using rule 71 (if_stmt -> IF LPAREN expr RPAREN LBRACE stmts RBRACE ELSE LBRACE stmts RBRACE .)
    INPUT           reduce using rule 71 (if_stmt -> IF LPAREN expr RPAREN LBRACE stmts RBRACE ELSE LBRACE stmts RBRACE .)
    OUTPUT          reduce using rule 71 (if_stmt -> IF LPAREN expr RPAREN LBRACE stmts RBRACE ELSE LBRACE stmts RBRACE .)
    BOOL            reduce using rule 71 (if_stmt -> IF LPAREN expr RPAREN LBRACE stmts RBRACE ELSE LBRACE stmts RBRACE .)
    INT             reduce using rule 71 (if_stmt -> IF LPAREN expr RPAREN LBRACE stmts RBRACE ELSE LBRACE stmts RBRACE .)
    FLOAT_TYPE      reduce using rule 71 (if_stmt -> IF LPAREN expr RPAREN LBRACE stmts RBRACE ELSE LBRACE stmts RBRACE .)
    STRING_TYPE     reduce using rule 71 (if_stmt -> IF LPAREN expr RPAREN LBRACE stmts RBRACE ELSE LBRACE stmts RBRACE .)
    LIST            reduce using rule 71 (if_stmt -> IF LPAREN expr RPAREN LBRACE stmts RBRACE ELSE LBRACE stmts RBRACE .)
    RBRACE          reduce using rule 71 (if_stmt -> IF LPAREN expr RPAREN LBRACE stmts RBRACE ELSE LBRACE stmts RBRACE .)

